#!/usr/bin/env tsx
/**
 * Email Testing Script for All Environments
 * Tests SendGrid email functionality across development, preview, and production
 */

import { config } from 'dotenv';
import { readFileSync, existsSync } from 'fs';
import { resolve } from 'path';
import chalk from 'chalk';
import ora from 'ora';

// Load environment variables
const envFile = process.env.ENV_FILE || '.env';
const envPath = resolve(process.cwd(), envFile);

if (existsSync(envPath)) {
  config({ path: envPath });
  console.log(chalk.gray(`Loaded environment from: ${envFile}`));
} else {
  console.log(chalk.yellow(`No ${envFile} file found, using existing environment variables`));
}

interface EmailTestResult {
  environment: string;
  status: 'success' | 'failure';
  message: string;
  messageId?: string;
  duration?: number;
}

class EmailTester {
  private environment: string;
  private testEmail: string;

  constructor(testEmail: string = 'test@example.com') {
    this.environment = process.env.NODE_ENV || 'development';
    this.testEmail = testEmail;
    console.log(chalk.blue.bold(`\n📧 Testing Email in ${this.environment.toUpperCase()} Environment\n`));
  }

  async sendTestEmail(): Promise<EmailTestResult> {
    const spinner = ora('Sending test email...').start();
    const startTime = Date.now();

    try {
      const apiKey = process.env.SENDGRID_API_KEY;
      const fromEmail = process.env.SENDGRID_FROM_EMAIL;
      const fromName = process.env.SENDGRID_FROM_NAME || 'YOLOVibeCode';

      if (!apiKey) {
        throw new Error('SENDGRID_API_KEY not configured');
      }

      if (!fromEmail) {
        throw new Error('SENDGRID_FROM_EMAIL not configured');
      }

      // Create email payload
      const emailData = {
        personalizations: [{
          to: [{ email: this.testEmail }],
          subject: `[${this.environment.toUpperCase()}] YOLOVibe Integration Test - ${new Date().toLocaleString()}`
        }],
        from: {
          email: fromEmail,
          name: fromName
        },
        mail_settings: {
          sandbox_mode: { enable: false }
        },
        content: [{
          type: 'text/html',
          value: `
            <html>
              <body style="font-family: Arial, sans-serif; padding: 20px; background-color: #f5f5f5;">
                <div style="max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                  <h1 style="color: #333; text-align: center;">🎯 YOLOVibe Integration Test</h1>
                  
                  <div style="background: #e8f4f8; padding: 20px; border-radius: 5px; margin: 20px 0;">
                    <h2 style="color: #2c5aa0; margin-top: 0;">Test Details</h2>
                    <p><strong>Environment:</strong> <span style="background: #007acc; color: white; padding: 3px 8px; border-radius: 3px;">${this.environment.toUpperCase()}</span></p>
                    <p><strong>Timestamp:</strong> ${new Date().toISOString()}</p>
                    <p><strong>From:</strong> ${fromEmail}</p>
                    <p><strong>Test Type:</strong> SendGrid Integration Test</p>
                  </div>

                  <div style="background: #f0f9ff; padding: 20px; border-radius: 5px; margin: 20px 0;">
                    <h3 style="color: #0369a1; margin-top: 0;">✅ Integration Status</h3>
                    <p>This email confirms that:</p>
                    <ul style="color: #374151;">
                      <li>✅ SendGrid API key is valid and working</li>
                      <li>✅ Email service is properly configured</li>
                      <li>✅ ${this.environment.charAt(0).toUpperCase() + this.environment.slice(1)} environment is functional</li>
                      <li>✅ Email delivery pipeline is operational</li>
                    </ul>
                  </div>

                  <div style="background: #fef3c7; padding: 15px; border-radius: 5px; margin: 20px 0;">
                    <p style="margin: 0; color: #92400e;">
                      <strong>🔧 Note:</strong> This is an automated test email generated by the YOLOVibe integration testing system.
                    </p>
                  </div>

                  <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;">
                    <p style="color: #6b7280; margin: 0;">
                      YOLOVibe Workshop Registration System<br/>
                      <em>Email Integration Test - ${new Date().getFullYear()}</em>
                    </p>
                  </div>
                </div>
              </body>
            </html>
          `
        }]
      };

      // Send email via SendGrid API
      const response = await fetch('https://api.sendgrid.com/v3/mail/send', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(emailData)
      });

      const duration = Date.now() - startTime;

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`SendGrid API error: ${response.status} ${response.statusText} - ${errorData}`);
      }

      // Get message ID from headers
      const messageId = response.headers.get('x-message-id');

      spinner.succeed(chalk.green('✓ Test email sent successfully'));

      return {
        environment: this.environment,
        status: 'success',
        message: `Test email sent successfully to ${this.testEmail}`,
        messageId: messageId || 'Not provided',
        duration
      };

    } catch (error) {
      spinner.fail(chalk.red('✗ Failed to send test email'));

      return {
        environment: this.environment,
        status: 'failure',
        message: error instanceof Error ? error.message : 'Unknown error',
        duration: Date.now() - startTime
      };
    }
  }

  printResult(result: EmailTestResult) {
    console.log(chalk.cyan.bold('\n📊 Email Test Results\n'));
    console.log('─'.repeat(60));

    const statusIcon = result.status === 'success' ? '✅' : '❌';
    const statusColor = result.status === 'success' ? chalk.green : chalk.red;

    console.log(`${statusIcon} ${chalk.bold('Email Test')}`);
    console.log(`   Environment: ${chalk.blue(result.environment.toUpperCase())}`);
    console.log(`   Status: ${statusColor(result.status.toUpperCase())}`);
    console.log(`   ${result.message}`);

    if (result.messageId) {
      console.log(chalk.gray(`   Message ID: ${result.messageId}`));
    }

    if (result.duration) {
      console.log(chalk.gray(`   Duration: ${result.duration}ms`));
    }

    console.log('─'.repeat(60));

    if (result.status === 'success') {
      console.log(chalk.green.bold('\n✅ Email test passed! Check your inbox.'));
      console.log(chalk.yellow(`📧 Test email sent to: ${this.testEmail}`));
      console.log(chalk.gray('Note: It may take a few minutes to arrive.'));
    } else {
      console.log(chalk.red.bold('\n❌ Email test failed. Please check the configuration.'));
    }
  }
}

// Main execution
async function main() {
  const testEmail = process.argv[2] || 'test@example.com';
  
  if (testEmail === 'test@example.com') {
    console.log(chalk.yellow('⚠️  Using default test email: test@example.com'));
    console.log(chalk.gray('To use a real email address, run: npx tsx scripts/test-email-environments.ts your.email@example.com\n'));
  }

  const tester = new EmailTester(testEmail);
  const result = await tester.sendTestEmail();
  tester.printResult(result);

  process.exit(result.status === 'success' ? 0 : 1);
}

// Run if executed directly
main().catch(error => {
  console.error(chalk.red.bold('Fatal error:'), error);
  process.exit(1);
});

export { EmailTester, EmailTestResult };