---
import { Icon } from "astro-icon/components";
---

<section id="book" class="py-20 bg-gradient-to-b from-gray-900 to-slate-900 dark:from-slate-900 dark:to-black">
  <div class="container mx-auto px-4">
    <div class="max-w-3xl mx-auto text-center mb-12">
      <div class="inline-block mb-3">
        <span class="inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg shadow-purple-500/30 border border-indigo-400/30 animate-pulse">
          <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
          </svg>
          <span class="relative">Book Now</span>
        </span>
      </div>
      <h2 class="text-6xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-pink-500 via-purple-500 to-cyan-400 dark:from-pink-400 dark:via-purple-300 dark:to-cyan-300 drop-shadow-lg" style="text-shadow: 0 0 10px rgba(216, 180, 254, 0.5);">Jump Into a Workshop</h2>
      <p class="text-xl text-white font-medium enhanced-text max-w-2xl mx-auto glow-text">Ready to level up? Pick a date that works for you and let's make some <span class="text-transparent bg-clip-text bg-gradient-to-r from-yellow-400 to-pink-500 font-bold">magic</span> happen!</p>
    </div>

    <div class="booking-container max-w-5xl mx-auto relative">
      <!-- Animated Neon Border Effect -->
      <div class="absolute -inset-1 bg-gradient-to-r from-purple-600 via-pink-500 to-cyan-400 rounded-2xl opacity-75 blur-lg animate-pulse"></div>
      
      <!-- Booking Widget Container -->
      <div class="min-h-[600px] flex flex-col relative z-10">
        <div class="grid md:grid-cols-5 gap-0 h-full rounded-2xl overflow-hidden">
          <!-- Left Column: Booking Form -->
          <div class="md:col-span-3 p-8 flex flex-col justify-between booking-left-column relative overflow-hidden">
            <!-- Decorative elements -->
            <div class="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-purple-500/10 to-cyan-500/10 rounded-full blur-3xl -translate-y-1/2 translate-x-1/4"></div>
            <div class="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-tr from-pink-500/10 to-yellow-500/10 rounded-full blur-3xl translate-y-1/3 -translate-x-1/4"></div>
            
            <div class="relative z-10 flex-1">
              <div class="flex items-center mb-8">
                <div class="w-12 h-12 rounded-full calendar-icon-container flex items-center justify-center mr-4">
                  <Icon name="bx:bxs-calendar" class="w-6 h-6 text-white" />
                </div>
                <h3 class="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-pink-400 to-cyan-400 drop-shadow-md" style="text-shadow: 0 0 8px rgba(139, 92, 246, 0.5);">Book Your Workshop</h3>
              </div>
              
              <!-- Booking Form -->
              <form id="booking-form" class="space-y-6">
                <!-- Workshop Selection -->
                <div class="space-y-2">
                  <label for="workshop-select" class="block text-white font-semibold text-sm">Choose Service</label>
                  <select id="workshop-select" name="productId" required 
                    class="w-full p-3 rounded-lg bg-black/30 border border-indigo-500/30 text-white focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all">
                    <option value="">Select a service...</option>
                    <option value="prod-3day" data-type="workshop" data-duration="3" data-price="3000">3-Day YOLO Workshop - $3,000</option>
                    <option value="prod-5day" data-type="workshop" data-duration="5" data-price="4500">5-Day YOLO Intensive - $4,500</option>
                    <option value="ai-consulting" data-type="consulting" data-duration="2" data-price="200" data-hourly="true">AI Business Development - $200/hour (Choose hours below)</option>
                  </select>
                </div>

                <!-- Date Selection -->
                <div class="space-y-2">
                  <label for="workshop-date" class="block text-white font-semibold text-sm">
                    <span id="date-label">Workshop Date</span> 
                    <span id="date-constraint" class="text-cyan-300 text-xs">(Monday, Wednesday, Friday)</span>
                  </label>
                  <input type="hidden" id="workshop-date" name="startDate" required />
                  
                  <!-- Simple date picker for consulting -->
                  <div id="consulting-date-picker" class="hidden space-y-2">
                    <input type="date" id="consulting-date" name="consultingDate"
                      class="w-full p-3 rounded-lg bg-black/30 border border-indigo-500/30 text-white focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all"
                      min={new Date().toISOString().split('T')[0]} />

                    <div class="grid grid-cols-2 gap-2">
                      <select id="consulting-duration" name="consultingDuration"
                        class="w-full p-3 rounded-lg bg-black/30 border border-indigo-500/30 text-white focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all">
                        <option value="2">2 Hours</option>
                        <option value="3">3 Hours</option>
                        <option value="4">4 Hours</option>
                        <option value="5">5 Hours</option>
                        <option value="6">6 Hours</option>
                        <option value="7">7 Hours</option>
                        <option value="8">8 Hours</option>
                      </select>
                      <select id="consulting-time" name="consultingTime"
                        class="w-full p-3 rounded-lg bg-black/30 border border-indigo-500/30 text-white focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all">
                        <option value="">Select available time...</option>
                      </select>
                    </div>
                    <div class="text-xs text-cyan-300/80">
                      üìÖ Monday‚ÄìFriday, 9 AM ‚Äì 5 PM (Central) ‚Ä¢ 2‚Äì8 hour blocks ‚Ä¢ Admin blockouts are enforced
                    </div>
                  </div>
                  
                  <!-- Custom Calendar -->
                  <div id="custom-calendar" class="bg-black/30 border border-indigo-500/30 rounded-lg p-4 hidden relative">
                    <!-- Month/Year Navigation -->
                    <div class="flex justify-between items-center mb-4">
                      <button type="button" id="prev-month" class="text-cyan-400 hover:text-cyan-300 p-1 transition-colors">
                        ‚Üê Previous
                      </button>
                    <div class="flex items-center space-x-2">
                        <select id="month-selector" class="bg-black/50 border border-indigo-500/30 text-white text-sm rounded px-2 py-1 focus:border-cyan-400 focus:ring-1 focus:ring-cyan-400/20">
                          <option value="0">January</option>
                          <option value="1">February</option>
                          <option value="2">March</option>
                          <option value="3">April</option>
                          <option value="4">May</option>
                          <option value="5">June</option>
                          <option value="6">July</option>
                          <option value="7">August</option>
                          <option value="8">September</option>
                          <option value="9">October</option>
                          <option value="10">November</option>
                          <option value="11">December</option>
                        </select>
                        <select id="year-selector" class="bg-black/50 border border-indigo-500/30 text-white text-sm rounded px-2 py-1 focus:border-cyan-400 focus:ring-1 focus:ring-cyan-400/20">
                          <!-- Years will be populated by JavaScript -->
                        </select>
                      <button id="reset-calendar" type="button" class="ml-2 text-xs px-2 py-1 rounded bg-gray-700/60 text-gray-200 hover:bg-gray-600/70 border border-gray-500/30">
                        Reset
                      </button>
                      <button id="today-month" type="button" class="text-xs px-2 py-1 rounded bg-indigo-600/70 text-white hover:bg-indigo-500/80 border border-indigo-400/40">
                        Today
                      </button>
                      </div>
                      <button type="button" id="next-month" class="text-cyan-400 hover:text-cyan-300 p-1 transition-colors">
                        Next ‚Üí
                      </button>
                    </div>
                    
                    <!-- Days of week header -->
                    <div class="grid grid-cols-7 gap-1 mb-2">
                      <div class="text-center text-xs text-gray-400 p-2">Sun</div>
                      <div class="text-center text-xs text-gray-400 p-2">Mon</div>
                      <div class="text-center text-xs text-gray-400 p-2">Tue</div>
                      <div class="text-center text-xs text-gray-400 p-2">Wed</div>
                      <div class="text-center text-xs text-gray-400 p-2">Thu</div>
                      <div class="text-center text-xs text-gray-400 p-2">Fri</div>
                      <div class="text-center text-xs text-gray-400 p-2">Sat</div>
                    </div>
                    
                    <!-- Calendar days -->
                    <div id="calendar-days" class="grid grid-cols-7 gap-1">
                      <!-- Days will be populated by JavaScript -->
                    </div>

                    <!-- Loading overlay -->
                    <div id="calendar-loading" class="hidden absolute inset-0 bg-black/40 backdrop-blur-sm rounded-lg flex items-center justify-center text-cyan-200 text-sm">
                      Loading availability‚Ä¶
                    </div>
                    
                    <div class="mt-3 text-xs text-cyan-300/80">
                      <div id="calendar-helper">Select a valid start date for your workshop</div>
                    </div>
                  </div>
                  
                  <!-- Selected date display -->
                  <div id="selected-date-display" class="text-sm text-cyan-300 hidden">
                    üìÖ Selected: <span id="selected-date-text"></span>
                  </div>
                </div>

                <!-- Attendee Count -->
                <div id="attendee-count-section" class="space-y-2">
                  <label for="attendee-count" class="block text-white font-semibold text-sm">Number of Attendees</label>
                  <select id="attendee-count" name="attendeeCount" required
                    class="w-full p-3 rounded-lg bg-black/30 border border-indigo-500/30 text-white focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all">
                    <option value="1">1 Person</option>
                    <option value="2">2 People</option>
                    <option value="3">3 People</option>
                    <option value="4">4 People</option>
                    <option value="5">5 People</option>
                    <option value="6">6 People</option>
                    <option value="7">7 People</option>
                    <option value="8">8 People</option>
                    <option value="9">9 People</option>
                    <option value="10">10 People (Max Capacity!)</option>
                  </select>
                </div>
                
                <!-- Consulting Duration (hidden by default) -->
                <div id="consulting-duration-section" class="space-y-2 hidden">
                  <label for="consulting-duration" class="block text-white font-semibold text-sm">How Many Hours Would You Like?</label>
                  <select id="consulting-duration" name="consultingDuration"
                    class="w-full p-3 rounded-lg bg-black/30 border border-indigo-500/30 text-white focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all">
                    <option value="">Select hours...</option>
                    <option value="2">2 Hours - $400 (Good start for focused ideas)</option>
                    <option value="3">3 Hours - $600 (Perfect for multiple concepts)</option>
                    <option value="4">4 Hours - $800 (Deep dive intensive)</option>
                    <option value="5">5 Hours - $1,000 (Full day strategy)</option>
                    <option value="6">6 Hours - $1,200 (Comprehensive planning)</option>
                    <option value="8">8 Hours - $1,600 (Complete business transformation)</option>
                  </select>
                  <div class="text-xs text-cyan-300/80">
                    üí° <strong>Recommendation:</strong> 2 hours is great for focused ideas, but if you have multiple business concepts to explore, 3-4 hours allows us to dive deeper and develop more comprehensive solutions.
                  </div>
                </div>

                <!-- Point of Contact -->
                <div class="space-y-4">
                  <div class="flex items-center justify-between">
                    <h4 class="text-white font-semibold">Point of Contact</h4>
                    <div id="include-contact-section" class="flex items-center space-x-2">
                      <input type="checkbox" id="include-contact-as-attendee" name="includeContactAsAttendee" 
                        class="w-4 h-4 text-cyan-500 bg-black/30 border-indigo-500/30 rounded focus:ring-cyan-500/20 focus:ring-2" />
                      <label for="include-contact-as-attendee" class="text-sm text-cyan-300 cursor-pointer">
                        Include as attendee
                      </label>
                    </div>
                  </div>
                  <div class="grid grid-cols-2 gap-4">
                    <input type="text" id="contact-first-name" name="contactFirstName" placeholder="First Name" required
                      class="p-3 rounded-lg bg-black/30 border border-indigo-500/30 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all" />
                    <input type="text" id="contact-last-name" name="contactLastName" placeholder="Last Name" required
                      class="p-3 rounded-lg bg-black/30 border border-indigo-500/30 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all" />
                  </div>
                  <input type="email" id="contact-email" name="contactEmail" placeholder="Email Address" required
                    class="w-full p-3 rounded-lg bg-black/30 border border-indigo-500/30 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all" />
                  <div class="space-y-1">
                    <input type="tel" id="contact-phone" name="contactPhone" placeholder="Phone Number (e.g., +1-555-123-4567)" required
                      class="w-full p-3 rounded-lg bg-black/30 border border-indigo-500/30 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all" />
                    <div class="text-xs text-cyan-300/70">üìû Include country code for international numbers</div>
                  </div>
                </div>

                <!-- Attendees Container -->
                <div id="attendees-container" class="space-y-4">
                  <h4 class="text-white font-semibold">Attendee Information</h4>
                  <!-- Attendee forms will be dynamically added here -->
                </div>

                <!-- Coupon Code -->
                <div class="space-y-2">
                  <label for="coupon-code" class="block text-white font-semibold text-sm">Coupon Code (Optional)</label>
                  <input type="text" id="coupon-code" name="couponCode" placeholder="Enter coupon code"
                    class="w-full p-3 rounded-lg bg-black/30 border border-indigo-500/30 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all" />
                </div>

                <!-- Submit Button -->
                <button type="submit" id="book-workshop-btn"
                  class="w-full py-4 px-6 rounded-lg bg-gradient-to-r from-purple-600 to-cyan-500 text-white font-bold text-lg hover:from-purple-700 hover:to-cyan-600 focus:ring-4 focus:ring-purple-500/50 transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed">
                  <span id="btn-text">Book Workshop</span>
                  <span id="btn-loading" class="hidden">
                    <Icon name="bx:bx-loader-alt" class="w-5 h-5 animate-spin inline mr-2" />
                    Processing...
                  </span>
                </button>
              </form>

              <!-- Success/Error Messages -->
              <div id="booking-message" class="hidden mt-4 p-4 rounded-lg"></div>
            </div>
            
            <div class="flex items-center gap-2 text-sm text-indigo-200 mt-6 relative z-10 bg-black/20 p-3 rounded-lg backdrop-blur-sm border border-white/10">
              <Icon name="bx:bxs-lock" class="w-4 h-4 text-cyan-400" />
              <span>All payments handled securely by Square</span>
            </div>
          </div>
          
          <!-- Right Column: Gradient Background & Features -->
          <div class="md:col-span-2 benefits-column p-8 rounded-r-xl relative overflow-hidden">
            <!-- Animated grid pattern -->
            <div class="absolute top-0 left-0 w-full h-full opacity-10">
              <div class="absolute inset-0 bg-grid-white/10 bg-[size:40px_40px] animate-grid-fade"></div>
            </div>
            
            <!-- Glow orbs -->
            <div class="absolute top-1/4 right-1/4 w-32 h-32 bg-purple-600/30 rounded-full blur-3xl animate-float"></div>
            <div class="absolute bottom-1/4 left-1/4 w-24 h-24 bg-cyan-500/30 rounded-full blur-3xl animate-float-delayed"></div>
            
            <div class="relative z-10">
              <h3 class="text-2xl font-bold mb-8 text-white inline-flex items-center">
                <span class="mr-2">‚ú®</span> Workshop Benefits
              </h3>
              
              <div class="space-y-8">
                <div class="flex items-start group">
                  <div class="feature-icon-container rounded-full p-3 mr-4 group-hover:shadow-lg group-hover:shadow-purple-500/50 transition-all duration-300">
                    <Icon name="bx:bxs-calendar" class="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <h4 class="font-bold text-white text-lg group-hover:text-transparent group-hover:bg-clip-text group-hover:bg-gradient-to-r group-hover:from-pink-400 group-hover:to-cyan-400 transition-all duration-300">Flexible Scheduling</h4>
                    <p class="text-indigo-100">Choose dates that work perfectly for your entire team</p>
                  </div>
                </div>
                
                <div class="flex items-start group">
                  <div class="feature-icon-container rounded-full p-3 mr-4 group-hover:shadow-lg group-hover:shadow-purple-500/50 transition-all duration-300">
                    <Icon name="bx:bxs-credit-card" class="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <h4 class="font-bold text-white text-lg group-hover:text-transparent group-hover:bg-clip-text group-hover:bg-gradient-to-r group-hover:from-pink-400 group-hover:to-cyan-400 transition-all duration-300">Secure Payments</h4>
                    <p class="text-indigo-100">Pay safely with all major credit cards and payment methods</p>
                  </div>
                </div>
                
                <div class="flex items-start group">
                  <div class="feature-icon-container rounded-full p-3 mr-4 group-hover:shadow-lg group-hover:shadow-purple-500/50 transition-all duration-300">
                    <Icon name="bx:bxs-group" class="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <h4 class="font-bold text-white text-lg group-hover:text-transparent group-hover:bg-clip-text group-hover:bg-gradient-to-r group-hover:from-pink-400 group-hover:to-cyan-400 transition-all duration-300">Group Discounts</h4>
                    <p class="text-indigo-100">Special rates available for teams of 5 or more</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- üéØ EVENT-DRIVEN BOOKING WIDGET JAVASCRIPT -->
<script>
  // üéØ EVENT-DRIVEN INFRASTRUCTURE
  // Using global event bus from SPAInitializer for compatibility
  
  // Event Types (simplified for compatibility)
  const EventTypes = {
    WORKSHOP_SELECTED: 'WORKSHOP_SELECTED',
    DATE_SELECTED: 'DATE_SELECTED',
    FORM_SUBMITTED: 'FORM_SUBMITTED',
    USER_INTERACTION: 'USER_INTERACTION',
    ERROR_OCCURRED: 'ERROR_OCCURRED',
    BOOKING_SUBMITTED: 'BOOKING_SUBMITTED'
  };

  interface Workshop {
    id: string;
    name: string;
    type: string;
    price: number;
    duration: number;
    description: string;
    maxCapacity: number;
    availableStartDays: string[];
  }

  interface ApiResponse<T> {
    success: boolean;
    data?: T;
    error?: string;
    message?: string;
  }

  /**
   * üéØ EVENT-DRIVEN BOOKING WIDGET
   * 
   * This is our NEW event-driven BookingWidget!
   * It communicates entirely through events - no direct coupling!
   */
  class EventDrivenBookingWidget {
    private workshopSelect: HTMLSelectElement;
    private dateInput: HTMLInputElement;
    private customCalendar: HTMLElement;
    private calendarDays: HTMLElement;
    private currentDate: Date;
    private selectedDate: Date | null = null;
    private currentWorkshop: Workshop | null = null;
    private workshops: Workshop[] = [];
    private attendeeCountSelect: HTMLSelectElement;
    private attendeeFieldsContainer: HTMLElement;
    private form: HTMLFormElement;
    private submitButton: HTMLButtonElement;
    private messageContainer: HTMLElement;
    
    // üéØ EVENT-DRIVEN ARCHITECTURE
    private globalEventBus: any;
    private componentId: string = 'booking-widget';
    
    // üì¶ Persistent cache system (unchanged)
    private static readonly CACHE_KEY = 'yolo-booking-form-cache';
    private static readonly CACHE_VERSION = '1.0';
    private attendeeDataCache: Map<number, {
      firstName: string;
      lastName: string;
      email: string;
    }> = new Map();

    private formCache = {
      version: EventDrivenBookingWidget.CACHE_VERSION,
      timestamp: Date.now(),
      formData: {
        productId: '',
        startDate: '',
        attendeeCount: '1',
        contactFirstName: '',
        contactLastName: '',
        contactEmail: '',
        contactPhone: '',
        couponCode: '',
        includeContactAsAttendee: false,
        consultingDate: '',
        consultingTime: '',
        consultingDuration: '',
        attendees: {} as { [key: number]: { firstName: string; lastName: string; email: string; } }
      }
    };

    // Render re-entrancy guards
    private isRenderingCalendar: boolean = false;
    private pendingRenderDate: { year: number; month: number } | null = null;

    constructor() {
      // üéØ INITIALIZE EVENT BUS
      // Use global event bus from SPAInitializer
      this.globalEventBus = (window as any).globalEventBus || {
        emit: (type: string, payload: any) => console.log('Event:', type, payload),
        on: (type: string, handler: Function) => {},
        off: (type: string, handler?: Function) => {}
      };
      
      // Initialize DOM elements
      this.workshopSelect = document.getElementById('workshop-select') as HTMLSelectElement;
      this.dateInput = document.getElementById('workshop-date') as HTMLInputElement;
      this.customCalendar = document.getElementById('custom-calendar') as HTMLElement;
      this.calendarDays = document.getElementById('calendar-days') as HTMLElement;
      this.currentDate = new Date();
      this.attendeeCountSelect = document.getElementById('attendee-count') as HTMLSelectElement;
      this.attendeeFieldsContainer = document.getElementById('attendees-container') as HTMLElement;
      this.form = document.getElementById('booking-form') as HTMLFormElement;
      this.submitButton = document.getElementById('book-workshop-btn') as HTMLButtonElement;
      this.messageContainer = document.getElementById('booking-message') as HTMLElement;

      this.init();
    }

    private async init(): Promise<void> {
      console.log('üéØ Initializing Event-Driven Booking Widget');
      
      // üéØ SETUP EVENT HANDLERS FIRST
      this.setupEventHandlers();
      
      // Load cached data
      this.restoreFromCache();
      
      // Load workshops, then render the current month once
      await this.loadWorkshops();
      // Ensure calendar grid starts clean
      this.currentDate = new Date();
      this.initializeMonthYearSelectors();
      await this.renderCalendar();
      
      // Update attendee fields after cache restoration
      this.updateAttendeeFields();
      
      // Show cache restoration message if data was found
      if (this.hasCachedData()) {
        this.showCacheRestorationMessage();
      }
      
      // Setup auto-save for all form changes
      this.setupAutoSave();
      
      // üéØ CHECK FOR URL PARAMETERS (support direct workshop links)
      this.checkForWorkshopFromURL();
      
      // üéØ EMIT INITIALIZATION EVENT
      await this.emitEvent(EventTypes.USER_INTERACTION, {
        action: 'view',
        element: 'booking-widget',
        page: 'booking',
        timestamp: new Date(),
        source: this.componentId,
        metadata: { 
          initialized: true,
          hasCachedData: this.hasCachedData()
        }
      } as UserInteractionEvent);
      
      console.log('‚úÖ Event-Driven Booking Widget initialized successfully!');
    }



    // üéØ TOGGLE ATTENDEE FIELDS VISIBILITY FOR AI CONSULTING
    private toggleAttendeeFieldsVisibility(isAIConsulting: boolean): void {
      // Get all the elements that should be hidden for AI consulting
      const attendeeCountSection = document.getElementById('attendee-count-section') as HTMLElement;
      const includeContactSection = document.getElementById('include-contact-section') as HTMLElement;
      const attendeesContainer = document.getElementById('attendees-container') as HTMLElement;
      const consultingDurationSection = document.getElementById('consulting-duration-section') as HTMLElement;
      
      if (isAIConsulting) {
        // Hide attendee-related fields for AI consulting
        attendeeCountSection?.classList.add('hidden');
        includeContactSection?.classList.add('hidden');
        attendeesContainer?.classList.add('hidden');
        
        // Show consulting duration section for AI consulting
        consultingDurationSection?.classList.remove('hidden');
        
        console.log('üéØ AI Consulting selected - hiding attendee fields, showing duration selector');
      } else {
        // Show attendee-related fields for workshops
        attendeeCountSection?.classList.remove('hidden');
        includeContactSection?.classList.remove('hidden');
        attendeesContainer?.classList.remove('hidden');
        
        // Hide consulting duration section for workshops
        consultingDurationSection?.classList.add('hidden');
        
        console.log('üéØ Workshop selected - showing attendee fields, hiding duration selector');
      }
    }

        // üéØ HANDLE EXTERNAL WORKSHOP SELECTION (from modals, direct links, etc.)
    private handleExternalWorkshopSelection(eventData: any): void {
      console.log('üéØ External workshop selection received:', eventData);
      
      // Find the matching option in the dropdown
      const workshopId = eventData.workshopId || eventData.id;
      if (!workshopId) return;
      
      // Set the dropdown to the selected workshop
      const option = this.workshopSelect.querySelector(`option[value="${workshopId}"]`) as HTMLOptionElement;
      if (option) {
        this.workshopSelect.value = workshopId;
        
        // Trigger the change event to update the form
        const changeEvent = new Event('change', { bubbles: true });
        this.workshopSelect.dispatchEvent(changeEvent);
        
        // Show a notification
        this.showSuccessMessage(`‚úÖ ${eventData.workshopName || option.textContent} selected!`);
        
        console.log(`‚úÖ Workshop "${workshopId}" auto-selected in booking form`);
      } else {
        console.warn(`‚ö†Ô∏è Workshop option "${workshopId}" not found in dropdown`);
      }
    }

     // üéØ CHECK FOR WORKSHOP IN URL PARAMETERS
     private checkForWorkshopFromURL(): void {
       const urlParams = new URLSearchParams(window.location.search);
       const workshopParam = urlParams.get('workshop') || urlParams.get('service');
       
       if (workshopParam) {
         console.log(`üîó Workshop "${workshopParam}" found in URL, auto-selecting...`);
         
         // Find the matching option
         const option = this.workshopSelect.querySelector(`option[value="${workshopParam}"]`) as HTMLOptionElement;
         if (option) {
           this.workshopSelect.value = workshopParam;
           
           // Trigger change event
           const changeEvent = new Event('change', { bubbles: true });
           this.workshopSelect.dispatchEvent(changeEvent);
           
           // Show notification
           this.showSuccessMessage(`üîó Pre-selected ${option.textContent} from URL`);
           
           console.log(`‚úÖ Workshop "${workshopParam}" auto-selected from URL`);
         } else {
           console.warn(`‚ö†Ô∏è Workshop "${workshopParam}" from URL not found in dropdown`);
         }
       }
     }

    // üéØ EVENT EMISSION HELPER
    private async emitEvent(eventType: string, payload: any): Promise<void> {
      try {
        // Add component context to all events
        payload.componentId = this.componentId;
        payload.timestamp = payload.timestamp || new Date();
        payload.source = payload.source || this.componentId;
        
        // Emit to local event bus
        await this.globalEventBus.emit(eventType, payload);
        
        // Also log for debugging
        console.log(`üéØ Event Emitted: ${eventType}`, payload);
      } catch (error) {
        console.error(`‚ùå Failed to emit event ${eventType}:`, error);
      }
    }

    private setupEventHandlers(): void {
      // üéØ LISTEN FOR EXTERNAL WORKSHOP SELECTION (from Learn More modals, direct links, etc.)
      this.globalEventBus.on('WORKSHOP_SELECTED', (eventData: any) => {
        this.handleExternalWorkshopSelection(eventData);
      });

      // üéØ WORKSHOP SELECTION EVENT HANDLING
      this.workshopSelect.addEventListener('change', async () => {
        const selectedOption = this.workshopSelect.selectedOptions[0];
        
        if (selectedOption && selectedOption.dataset.workshop) {
          const workshop = JSON.parse(selectedOption.dataset.workshop);
          
          // üéØ EMIT WORKSHOP SELECTED EVENT
          await this.emitEvent(EventTypes.WORKSHOP_SELECTED, {
            workshopId: workshop.id,
            workshopName: workshop.name,
            workshopType: workshop.type.toUpperCase(),
            price: workshop.price,
            timestamp: new Date(),
            source: this.componentId
          } as WorkshopSelectedEvent);
        }
        
        await this.updateAvailableDates();
        this.updateAttendeeFields();
        setTimeout(() => this.saveToCache(), 300);
      });

      // üéØ ATTENDEE COUNT CHANGE EVENT HANDLING
      this.attendeeCountSelect.addEventListener('change', async () => {
        // üéØ EMIT USER INTERACTION EVENT
        await this.emitEvent(EventTypes.USER_INTERACTION, {
          action: 'click',
          element: 'attendee-count-select',
          page: 'booking',
          timestamp: new Date(),
          source: this.componentId,
          metadata: { 
            newAttendeeCount: this.attendeeCountSelect.value,
            workshopSelected: !!this.currentWorkshop
          }
        } as UserInteractionEvent);
        
        this.updateAttendeeFields();
        setTimeout(() => this.saveToCache(), 300);
      });

      // Handle "include contact as attendee" checkbox
      const includeContactCheckbox = document.getElementById('include-contact-as-attendee') as HTMLInputElement;
      if (includeContactCheckbox) {
        includeContactCheckbox.addEventListener('change', async () => {
          // üéØ EMIT USER INTERACTION EVENT
          await this.emitEvent(EventTypes.USER_INTERACTION, {
            action: 'click',
            element: 'include-contact-checkbox',
            page: 'booking',
            timestamp: new Date(),
            source: this.componentId,
            metadata: { 
              checked: includeContactCheckbox.checked
            }
          } as UserInteractionEvent);
          
          this.updateAttendeeFields();
          this.saveToCache();
        });
      }

      // üéØ FORM SUBMISSION EVENT HANDLING
      this.form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // üéØ EMIT FORM SUBMISSION EVENT
        await this.emitEvent(EventTypes.FORM_SUBMITTED, {
          action: 'submit',
          element: 'booking-form',
          page: 'booking',
          timestamp: new Date(),
          source: this.componentId,
          metadata: {
            workshopId: this.currentWorkshop?.id,
            attendeeCount: this.attendeeCountSelect.value,
            hasSelectedDate: !!this.selectedDate
          }
        } as UserInteractionEvent);
        
        this.handleSubmit();
      });

      // Calendar navigation
      document.getElementById('prev-month')?.addEventListener('click', async () => {
        await this.emitEvent(EventTypes.USER_INTERACTION, {
          action: 'click',
          element: 'calendar-prev-month',
          page: 'booking',
          timestamp: new Date(),
          source: this.componentId
        } as UserInteractionEvent);
        
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
        this.updateMonthYearSelectors();
        await this.renderCalendar();
      });

      document.getElementById('next-month')?.addEventListener('click', async () => {
        await this.emitEvent(EventTypes.USER_INTERACTION, {
          action: 'click',
          element: 'calendar-next-month',
          page: 'booking',
          timestamp: new Date(),
          source: this.componentId
        } as UserInteractionEvent);
        
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
        this.updateMonthYearSelectors();
        await this.renderCalendar();
      });

      // üéØ MONTH/YEAR SELECTOR EVENT HANDLERS
      const monthSelector = document.getElementById('month-selector') as HTMLSelectElement;
      const yearSelector = document.getElementById('year-selector') as HTMLSelectElement;

      let monthDebounce: number | undefined;
      monthSelector?.addEventListener('change', async () => {
        await this.emitEvent(EventTypes.USER_INTERACTION, {
          action: 'change',
          element: 'calendar-month-selector',
          page: 'booking',
          timestamp: new Date(),
          source: this.componentId,
          metadata: { 
            newMonth: parseInt(monthSelector.value),
            currentYear: this.currentDate.getFullYear()
          }
        } as UserInteractionEvent);
        
        this.currentDate.setMonth(parseInt(monthSelector.value));
        if (monthDebounce) clearTimeout(monthDebounce);
        monthDebounce = setTimeout(() => this.renderCalendar(), 150) as unknown as number;
      });

      let yearDebounce: number | undefined;
      yearSelector?.addEventListener('change', async () => {
        await this.emitEvent(EventTypes.USER_INTERACTION, {
          action: 'change',
          element: 'calendar-year-selector',
          page: 'booking',
          timestamp: new Date(),
          source: this.componentId,
          metadata: { 
            newYear: parseInt(yearSelector.value),
            currentMonth: this.currentDate.getMonth()
          }
        } as UserInteractionEvent);
        
        this.currentDate.setFullYear(parseInt(yearSelector.value));
        if (yearDebounce) clearTimeout(yearDebounce);
        yearDebounce = setTimeout(() => this.renderCalendar(), 150) as unknown as number;
      });

      // Today quick-jump
      document.getElementById('today-month')?.addEventListener('click', async () => {
        this.currentDate = new Date();
        this.updateMonthYearSelectors();
        await this.renderCalendar();
      });

      // Reset calendar/cache
      document.getElementById('reset-calendar')?.addEventListener('click', async () => {
        localStorage.removeItem(EventDrivenBookingWidget.CACHE_KEY);
        this.selectedDate = null;
        this.dateInput.value = '';
        this.currentDate = new Date();
        this.updateMonthYearSelectors();
        await this.renderCalendar();
        this.showMessage('success', 'Calendar reset.');
      });

      // Setup contact field validation
      this.setupContactFieldValidation();

      // Consulting date/time dynamic availability
      const consultingDateEl = document.getElementById('consulting-date') as HTMLInputElement;
      const consultingTimeEl = document.getElementById('consulting-time') as HTMLSelectElement;
      const consultingDurationEl = document.getElementById('consulting-duration') as HTMLSelectElement;

      const refreshConsultingSlots = async () => {
        if (!consultingDateEl || !consultingTimeEl || !consultingDurationEl) return;
        if (!consultingDateEl.value) return;
        try {
          consultingTimeEl.innerHTML = '<option value="">Loading‚Ä¶</option>';
          const res = await fetch(`/api/calendar/consulting-availability?date=${consultingDateEl.value}&durationHours=${consultingDurationEl.value}`);
          if (!res.ok) throw new Error('Failed to load time slots');
          const json = await res.json();
          const slots: string[] = json?.data?.slots || [];
          consultingTimeEl.innerHTML = '<option value="">Select available time...</option>';
          for (const s of slots) {
            const opt = document.createElement('option');
            opt.value = s;
            opt.textContent = s;
            consultingTimeEl.appendChild(opt);
          }
        } catch (err) {
          consultingTimeEl.innerHTML = '<option value="">No availability</option>';
        }
      };

      consultingDateEl?.addEventListener('change', refreshConsultingSlots);
      consultingDurationEl?.addEventListener('change', refreshConsultingSlots);
    }

    private setupContactFieldValidation(): void {
      const contactFields = [
        document.getElementById('contact-email'),
        document.getElementById('contact-phone'),
        document.getElementById('contact-first-name'),
        document.getElementById('contact-last-name')
      ];

      contactFields.forEach(field => {
        if (field) {
          field.addEventListener('input', () => {
            this.validateFieldRealTime(field as HTMLInputElement);
            this.syncContactToAttendee();
          });
          
          field.addEventListener('blur', () => {
            this.validateFieldRealTime(field as HTMLInputElement);
            this.syncContactToAttendee();
          });
        }
      });
    }

    private syncContactToAttendee(): void {
      const includeContactCheckbox = document.getElementById('include-contact-as-attendee') as HTMLInputElement;
      if (!includeContactCheckbox?.checked) return;

      const contactFirstName = (document.getElementById('contact-first-name') as HTMLInputElement)?.value || '';
      const contactLastName = (document.getElementById('contact-last-name') as HTMLInputElement)?.value || '';
      const contactEmail = (document.getElementById('contact-email') as HTMLInputElement)?.value || '';

      const attendeeFirstName = document.querySelector('input[name="attendee-1-firstName"]') as HTMLInputElement;
      const attendeeLastName = document.querySelector('input[name="attendee-1-lastName"]') as HTMLInputElement;
      const attendeeEmail = document.querySelector('input[name="attendee-1-email"]') as HTMLInputElement;

      if (attendeeFirstName) attendeeFirstName.value = contactFirstName;
      if (attendeeLastName) attendeeLastName.value = contactLastName;
      if (attendeeEmail) attendeeEmail.value = contactEmail;
    }

    private async loadWorkshops(): Promise<void> {
      try {
        // üéØ EMIT LOADING EVENT
        await this.emitEvent(EventTypes.USER_INTERACTION, {
          action: 'view',
          element: 'workshop-loading',
          page: 'booking',
          timestamp: new Date(),
          source: this.componentId,
          metadata: { operation: 'loading_workshops' }
        } as UserInteractionEvent);
        
        // Enhanced error handling with retry logic
        let response: Response;
        let retryCount = 0;
        const maxRetries = 3;
        
        while (retryCount < maxRetries) {
          try {
            response = await fetch('/api/workshops/available', {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache'
              }
            });
            
            if (response.ok) {
              break;
            }
            
            retryCount++;
            if (retryCount < maxRetries) {
              console.log(`üîÑ Retrying workshop load (attempt ${retryCount}/${maxRetries})`);
              await new Promise(resolve => setTimeout(resolve, 1000 * retryCount)); // Exponential backoff
            }
          } catch (fetchError) {
            retryCount++;
            if (retryCount >= maxRetries) {
              throw fetchError;
            }
            console.log(`üîÑ Retrying workshop load after fetch error (attempt ${retryCount}/${maxRetries})`);
            await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));
          }
        }
        
        if (!response || !response.ok) {
          throw new Error(`HTTP ${response?.status}: ${response?.statusText || 'Network error'}`);
        }
        
        const result: ApiResponse<Workshop[]> = await response.json();

        if (result.success && result.data && Array.isArray(result.data)) {
          this.workshops = result.data;
          this.populateWorkshopDropdown();
          
          // üéØ EMIT SUCCESS EVENT
          await this.emitEvent(EventTypes.USER_INTERACTION, {
            action: 'view',
            element: 'workshops-loaded',
            page: 'booking',
            timestamp: new Date(),
            source: this.componentId,
            metadata: { 
              workshopCount: this.workshops.length,
              workshops: this.workshops.map(w => ({ id: w.id, name: w.name }))
            }
          } as UserInteractionEvent);
          
          console.log(`‚úÖ Loaded ${this.workshops.length} workshops successfully`);
        } else {
          throw new Error(result.error || 'Invalid response format from workshops API');
        }
      } catch (error) {
        console.error('‚ùå Workshop loading error:', error);
        
        // üéØ EMIT ERROR EVENT
        await this.emitEvent(EventTypes.ERROR_OCCURRED, {
          error: error instanceof Error ? error.message : 'Unknown error loading workshops',
          page: 'booking',
          action: 'load_workshops',
          severity: 'medium',
          timestamp: new Date(),
          source: this.componentId
        } as ErrorOccurredEvent);
        
        // Enhanced error message with retry option
        this.showMessage('error', `Failed to load available workshops. ${error instanceof Error ? error.message : 'Please check your connection and refresh the page.'}`);
        
        // Add retry button
        this.addRetryButton();
      }
    }

    private populateWorkshopDropdown(): void {
      while (this.workshopSelect.children.length > 1) {
        this.workshopSelect.removeChild(this.workshopSelect.lastChild!);
      }

      this.workshops.forEach(workshop => {
        const option = document.createElement('option');
        option.value = workshop.id;
        option.textContent = `${workshop.name} - $${workshop.price} (${workshop.duration} ${workshop.type === 'hourly-consulting' ? 'hrs min' : 'days'})`;
        option.dataset.workshop = JSON.stringify(workshop);
        this.workshopSelect.appendChild(option);
      });
    }

    private async updateAvailableDates(): Promise<void> {
      const selectedOption = this.workshopSelect.selectedOptions[0];
      
      if (!selectedOption || !selectedOption.dataset.workshop) {
        this.customCalendar.classList.add('hidden');
        return;
      }

      this.currentWorkshop = JSON.parse(selectedOption.dataset.workshop);
      this.customCalendar.classList.remove('hidden');

      const isAIConsulting = this.currentWorkshop.id === 'ai-consulting';
      
      const dateLabel = document.querySelector('label[for="workshop-date"]');
      if (dateLabel) {
        let constraints = '';
        if (isAIConsulting) constraints = 'Monday‚ÄìFriday';
        else if (this.currentWorkshop.name.includes('3-Day')) constraints = 'Monday, Tuesday, or Wednesday';
        else constraints = 'Monday only';
        const labelText = isAIConsulting ? 'Session Date' : 'Workshop Date';
        dateLabel.innerHTML = `${labelText} <span class="text-cyan-300 text-xs">(${constraints})</span>`;
      }

      const helperDiv = document.getElementById('calendar-helper');
      if (helperDiv) {
        let constraints = '';
        if (isAIConsulting) constraints = 'weekday';
        else if (this.currentWorkshop.name.includes('3-Day')) constraints = 'Monday, Tuesday, or Wednesday';
        else constraints = 'Monday only';
        const duration = isAIConsulting ? 'session' : (this.currentWorkshop.name.includes('3-Day') ? '3 days' : '5 days');
        helperDiv.textContent = isAIConsulting
          ? `üìÖ Select a ${constraints} for your consulting session`
          : `üìÖ Select a ${constraints} to start your ${duration} workshop`;
      }

      // üéØ ENHANCED: Initialize month/year selectors
      this.initializeMonthYearSelectors();
      await this.renderCalendar();
    }

    // üéØ NEW: Initialize month/year selectors
    private initializeMonthYearSelectors(): void {
      const monthSelector = document.getElementById('month-selector') as HTMLSelectElement;
      const yearSelector = document.getElementById('year-selector') as HTMLSelectElement;
      
      if (!monthSelector || !yearSelector) return;

      // Set current month
      monthSelector.value = this.currentDate.getMonth().toString();

      // Populate years (current year + 2 years ahead)
      yearSelector.innerHTML = '';
      const currentYear = new Date().getFullYear();
      for (let year = currentYear; year <= currentYear + 2; year++) {
        const option = document.createElement('option');
        option.value = year.toString();
        option.textContent = year.toString();
        yearSelector.appendChild(option);
      }

      // Set current year
      yearSelector.value = this.currentDate.getFullYear().toString();
    }

    // üéØ NEW: Update month/year selectors to match current date
    private updateMonthYearSelectors(): void {
      const monthSelector = document.getElementById('month-selector') as HTMLSelectElement;
      const yearSelector = document.getElementById('year-selector') as HTMLSelectElement;
      
      if (!monthSelector || !yearSelector) return;

      monthSelector.value = this.currentDate.getMonth().toString();
      yearSelector.value = this.currentDate.getFullYear().toString();
    }

    private async renderCalendar(): Promise<void> {
      if (this.isRenderingCalendar) {
        // Queue the latest date to render after current cycle
        this.pendingRenderDate = {
          year: this.currentDate.getFullYear(),
          month: this.currentDate.getMonth(),
        };
        return;
      }
      this.isRenderingCalendar = true;
      if (!this.currentWorkshop) {
        this.isRenderingCalendar = false;
        return;
      }

      const loadingOverlay = document.getElementById('calendar-loading');
      loadingOverlay?.classList.remove('hidden');

      const month = this.currentDate.getMonth();
      const year = this.currentDate.getFullYear();
      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);
      const daysInMonth = lastDay.getDate();
      const firstDayOfWeek = firstDay.getDay();
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      // üéØ ENHANCED: Update month/year selectors to match current date
      this.updateMonthYearSelectors();

      // Recreate the grid each render to guarantee a single month in the DOM
      const existingGrid = document.getElementById('calendar-days');
      if (existingGrid) {
        const newGrid = document.createElement('div');
        newGrid.id = 'calendar-days';
        newGrid.className = 'grid grid-cols-7 gap-1';
        existingGrid.replaceWith(newGrid);
        this.calendarDays = newGrid as HTMLElement;
      }

      for (let i = 0; i < firstDayOfWeek; i++) {
        const emptyCell = document.createElement('div');
        emptyCell.className = 'p-2';
        this.calendarDays.appendChild(emptyCell);
      }

      // Enforce allowed days by workshop type
      let allowedDays: number[];
      if (this.currentWorkshop.id === 'ai-consulting') {
        // Mon‚ÄìFri
        allowedDays = [1,2,3,4,5];
      } else if (this.currentWorkshop.name.includes('3-Day')) {
        // 3-day: Mon, Tue, Wed for starting days
        allowedDays = [1,2,3];
      } else {
        // 5-day: Monday only
        allowedDays = [1];
      }
      
      // üéØ ENHANCED: Get real-time availability data
      const availabilityData = await this.getAvailabilityForMonth(year, month);
      
      for (let i = 1; i <= daysInMonth; i++) {
        const dayCell = document.createElement('div');
        const currentDate = new Date(year, month, i);
        const dayOfWeek = currentDate.getDay();
        const isPastDate = currentDate < today;
        const isValidDay = allowedDays.includes(dayOfWeek) && !isPastDate;
        
        // üéØ SET DURATION BASED ON WORKSHOP TYPE
        let workshopDuration;
        if (this.currentWorkshop.id === 'ai-consulting') {
          workshopDuration = 1; // Single day for consulting sessions
        } else if (this.currentWorkshop.name.includes('3-Day')) {
          workshopDuration = 3;
        } else {
          workshopDuration = 5;
        }

        dayCell.textContent = i.toString();
        
        dayCell.className = 'text-center text-sm p-2 rounded transition-all duration-200 border';
        
        const isPartOfSelectedWorkshop = this.selectedDate && this.isDateInWorkshopRange(currentDate, this.selectedDate, workshopDuration);
        const isSelectedStartDate = this.selectedDate && this.selectedDate.toDateString() === currentDate.toDateString();
        
        // üéØ ENHANCED: Check real-time availability
        const dateKey = currentDate.toISOString().split('T')[0];
        const isAvailable = availabilityData[dateKey] !== false; // Available unless explicitly blocked
        
        if (isSelectedStartDate) {
          dayCell.className += ' bg-cyan-500 text-black font-bold border-cyan-400 ring-2 ring-cyan-300';
        } else if (isPartOfSelectedWorkshop) {
          dayCell.className += ' bg-cyan-500/30 text-white font-semibold border-cyan-400 border-2';
        } else if (isValidDay && isAvailable) {
          dayCell.className += ' text-white bg-indigo-600 hover:bg-cyan-500 border-indigo-400 hover:border-cyan-400 cursor-pointer font-semibold';
          // Add availability indicator
          dayCell.setAttribute('data-available', 'true');
        } else if (isValidDay && !isAvailable) {
          dayCell.className += ' text-gray-400 bg-gray-700/50 border-gray-600 cursor-not-allowed opacity-50';
          dayCell.setAttribute('data-available', 'false');
          dayCell.title = 'This date is not available';
        } else {
          dayCell.className += ' text-gray-500 bg-gray-800/30 cursor-not-allowed border-gray-700/30 opacity-60';
        }

        if (isValidDay && isAvailable) {
          dayCell.addEventListener('mouseenter', () => {
            this.showWorkshopDuration(i, workshopDuration);
          });

          dayCell.addEventListener('mouseleave', () => {
            this.clearWorkshopDuration();
          });

          dayCell.addEventListener('click', () => {
            this.selectDate(new Date(year, month, i));
          });
        }

        this.calendarDays.appendChild(dayCell);
      }

      const totalCells = this.calendarDays.children.length;
      const remainingCells = Math.max(0, 42 - totalCells);
      for (let i = 0; i < remainingCells; i++) {
        const emptyCell = document.createElement('div');
        emptyCell.className = 'p-2';
        this.calendarDays.appendChild(emptyCell);
      }

      // üéØ ENHANCED: Update calendar helper text with availability info
      this.updateCalendarHelperText(availabilityData);

      loadingOverlay?.classList.add('hidden');

      // Handle any queued render request (caused by rapid month/year changes)
      if (this.pendingRenderDate) {
        const { year: y, month: m } = this.pendingRenderDate;
        this.pendingRenderDate = null;
        this.currentDate.setFullYear(y);
        this.currentDate.setMonth(m);
        this.isRenderingCalendar = false;
        await this.renderCalendar();
        return;
      }

      this.isRenderingCalendar = false;
    }

    private showWorkshopDuration(startDay: number, duration: number): void {
      const allCells = Array.from(this.calendarDays.children) as HTMLElement[];
      const firstDayOfWeek = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1).getDay();
      
      this.clearWorkshopDuration();

      for (let i = 0; i < duration; i++) {
        const cellIndex = firstDayOfWeek + startDay - 1 + i;
        if (cellIndex < allCells.length && allCells[cellIndex].textContent) {
          const cell = allCells[cellIndex];
          if (!cell.classList.contains('cursor-not-allowed')) {
            if (!cell.classList.contains('bg-cyan-500')) {
              cell.classList.add('bg-cyan-400/40', 'border-cyan-300', 'border-2');
            }
            if (i === 0) {
              cell.classList.add('ring-2', 'ring-cyan-400', 'shadow-lg', 'shadow-cyan-400/50');
            } else if (i === duration - 1) {
              cell.classList.add('ring-2', 'ring-purple-400', 'shadow-lg', 'shadow-purple-400/50');
            } else {
              cell.classList.add('ring-1', 'ring-cyan-300');
            }
          }
        }
      }
    }

    private clearWorkshopDuration(): void {
      const allCells = Array.from(this.calendarDays.children) as HTMLElement[];
      allCells.forEach(cell => {
        cell.classList.remove(
          'bg-cyan-400/30', 'bg-cyan-400/40', 'border-cyan-300', 'border-2',
          'ring-1', 'ring-2', 'ring-cyan-400', 'ring-cyan-300', 'ring-purple-400',
          'shadow-lg', 'shadow-cyan-400/50', 'shadow-purple-400/50'
        );
      });
    }

    private async getAvailabilityForMonth(year: number, month: number): Promise<{ [date: string]: boolean }> {
      try {
        // Get the first and last day of the month
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);

        const url = `/api/calendar/availability?startDate=${firstDay.toISOString().split('T')[0]}&endDate=${lastDay.toISOString().split('T')[0]}`;
        const response = await fetch(url, { headers: { 'Accept': 'application/json' } });

        if (response.ok) {
          const json = await response.json();
          // API shape: { success: true, data: { availability: {...} } }
          if (json && json.data && json.data.availability) {
            return json.data.availability as { [date: string]: boolean };
          }
          // Backward-compat: some versions may return availability at the root
          if (json && json.availability) {
            return json.availability as { [date: string]: boolean };
          }
        } else if (response.status === 400) {
          // Defensive: return empty availability for bad request to avoid UI spam
          console.warn('‚ö†Ô∏è Availability request returned 400. URL:', url);
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Could not fetch availability data:', error);
      }

      // Default: all dates appear available if API fails
      return {};
    }

    private updateCalendarHelperText(availabilityData: { [date: string]: boolean }): void {
      const helperDiv = document.getElementById('calendar-helper');
      if (!helperDiv) return;

      const availableDates = Object.keys(availabilityData).filter(date => availabilityData[date] !== false);
      const blockedDates = Object.keys(availabilityData).filter(date => availabilityData[date] === false);

      if (blockedDates.length > 0) {
        helperDiv.innerHTML = `üìÖ <span class="text-cyan-300">Available dates highlighted</span> ‚Ä¢ <span class="text-gray-400">${blockedDates.length} blocked dates</span>`;
      } else {
        helperDiv.innerHTML = `üìÖ <span class="text-cyan-300">All dates available for this month</span>`;
      }
    }

    private async selectDate(date: Date): Promise<void> {
      this.selectedDate = date;
      this.dateInput.value = date.toISOString().split('T')[0];
      
      // üéØ EMIT DATE SELECTED EVENT
      if (this.currentWorkshop) {
        await this.emitEvent(EventTypes.DATE_SELECTED, {
          date,
          workshopId: this.currentWorkshop.id,
          workshopType: this.currentWorkshop.type.toUpperCase(),
          duration: this.currentWorkshop.duration,
          timestamp: new Date(),
          source: this.componentId
        } as DateSelectedEvent);
      }
      
      const selectedDateDisplay = document.getElementById('selected-date-display');
      const selectedDateText = document.getElementById('selected-date-text');
      if (selectedDateDisplay && selectedDateText && this.currentWorkshop) {
        const isAIConsulting = this.currentWorkshop.id === 'ai-consulting';
        
        const startDateStr = date.toLocaleDateString('en-US', {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
        
        if (isAIConsulting) {
          // Single day display for AI consulting
          selectedDateText.innerHTML = `${startDateStr} <span class="text-purple-300">(Consulting Session)</span>`;
        } else {
          // Multi-day display for workshops
          const duration = this.currentWorkshop.name.includes('3-Day') ? 3 : 5;
          const endDate = new Date(date);
          endDate.setDate(date.getDate() + duration - 1);
          
          const endDateStr = endDate.toLocaleDateString('en-US', {
            weekday: 'long',
            month: 'long',
            day: 'numeric'
          });
          
          selectedDateText.innerHTML = `${startDateStr} <span class="text-cyan-400">‚Üí</span> ${endDateStr} <span class="text-purple-300">(${duration} days)</span>`;
        }
        
        selectedDateDisplay.classList.remove('hidden');
      }

      await this.renderCalendar();
      this.hideMessage();
      this.saveToCache();
    }

    private async handleSubmit(): Promise<void> {
      try {
        this.setLoading(true);
        this.hideMessage();

        if (!this.validateForm()) {
          this.setLoading(false);
          return;
        }

        const selectedOption = this.workshopSelect.selectedOptions[0];
        if (selectedOption && selectedOption.dataset.workshop && this.dateInput.value) {
          const workshop: Workshop = JSON.parse(selectedOption.dataset.workshop);
          const selectedDate = new Date(this.dateInput.value);
          const dayOfWeek = selectedDate.getDay();
          const allowedDays = this.getAllowedDayNumbers(workshop.availableStartDays);
          
          if (!allowedDays.includes(dayOfWeek)) {
            const constraintText = this.getDateConstraintText(workshop.availableStartDays);
            throw new Error(`Invalid date selected. ${workshop.name} can only start on: ${constraintText}`);
          }
        }

        const formData = new FormData(this.form);
        const attendeeCount = parseInt(formData.get('attendeeCount') as string);
        const includeContactAsAttendee = formData.get('includeContactAsAttendee') === 'on';

        const attendees = [];
        for (let i = 1; i <= attendeeCount; i++) {
          attendees.push({
            firstName: formData.get(`attendee-${i}-firstName`) as string,
            lastName: formData.get(`attendee-${i}-lastName`) as string,
            email: formData.get(`attendee-${i}-email`) as string,
          });
        }

        const purchaseRequest = {
          bookingRequest: {
            productId: formData.get('productId') as string,
            startDate: formData.get('startDate') as string,
            attendeeCount: attendeeCount,
            attendees: attendees,
            pointOfContact: {
              firstName: formData.get('contactFirstName') as string,
              lastName: formData.get('contactLastName') as string,
              email: formData.get('contactEmail') as string,
              phone: formData.get('contactPhone') as string,
            },
            includeContactAsAttendee: includeContactAsAttendee,
            couponCode: formData.get('couponCode') as string || undefined,
            consulting: this.workshopSelect.value === 'ai-consulting' ? {
              date: (document.getElementById('consulting-date') as HTMLInputElement)?.value,
              startTime: (document.getElementById('consulting-time') as HTMLSelectElement)?.value,
              durationHours: parseInt((document.getElementById('consulting-duration') as HTMLSelectElement)?.value || '2'),
            } : undefined,
          },
          paymentMethod: {
            type: 'card',
            amount: this.calculateTotal(formData.get('productId') as string, attendeeCount, formData.get('couponCode') as string)
          }
        };

        const response = await fetch('/api/purchase/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(purchaseRequest),
        });

        const result: ApiResponse<any> = await response.json();

        if (result.success) {
          // üéØ EMIT BOOKING SUBMITTED EVENT
          await this.emitEvent(EventTypes.BOOKING_SUBMITTED, {
            bookingId: result.data?.id || `booking-${Date.now()}`,
            workshopId: purchaseRequest.bookingRequest.productId,
            userId: 'anonymous', // In real app, get from auth
            attendeeCount: attendeeCount,
            totalAmount: purchaseRequest.paymentMethod.amount,
            startDate: new Date(purchaseRequest.bookingRequest.startDate),
            pointOfContact: {
              name: `${purchaseRequest.bookingRequest.pointOfContact.firstName} ${purchaseRequest.bookingRequest.pointOfContact.lastName}`,
              email: purchaseRequest.bookingRequest.pointOfContact.email,
              phone: purchaseRequest.bookingRequest.pointOfContact.phone
            },
            timestamp: new Date(),
            source: this.componentId
          } as BookingSubmittedEvent);
          
          this.clearCache();
          
          this.showMessage('success', `Workshop booked successfully! You'll receive a confirmation email shortly. ${result.data?.confirmationNumber ? `Confirmation: ${result.data.confirmationNumber}` : ''}`);
          this.form.reset();
          this.updateAttendeeFields();
          this.dateInput.disabled = true;
        } else {
          throw new Error(result.error || result.message || 'Booking failed');
        }

      } catch (error) {
        // üéØ EMIT ERROR EVENT
        await this.emitEvent(EventTypes.ERROR_OCCURRED, {
          error: error instanceof Error ? error.message : 'Unknown booking error',
          page: 'booking',
          action: 'submit_booking',
          severity: 'high',
          timestamp: new Date(),
          source: this.componentId
        } as ErrorOccurredEvent);
        
        this.showMessage('error', `Sorry, there was an issue with your booking: ${error instanceof Error ? error.message : 'Please try again or contact support.'}`);
      } finally {
        this.setLoading(false);
      }
    }

    private calculateTotal(productId: string, attendeeCount: number, couponCode?: string): number {
      const workshop = this.workshops.find(w => w.id === productId);
      if (!workshop) return 0;

      let total = workshop.price * attendeeCount;
      
      if (couponCode) {
        // Coupon logic will be handled by backend
      }

      return total;
    }

    private setLoading(loading: boolean): void {
      const btnText = document.getElementById('btn-text');
      const btnLoading = document.getElementById('btn-loading');
      
      if (loading) {
        btnText?.classList.add('hidden');
        btnLoading?.classList.remove('hidden');
        this.submitButton.disabled = true;
      } else {
        btnText?.classList.remove('hidden');
        btnLoading?.classList.add('hidden');
        this.submitButton.disabled = false;
      }
    }

    private showMessage(type: 'success' | 'error', message: string): void {
      this.messageContainer.className = `mt-4 p-4 rounded-lg ${
        type === 'success' 
          ? 'bg-green-500/20 border border-green-500/30 text-green-300' 
          : 'bg-red-500/20 border border-red-500/30 text-red-300'
      }`;
      
      if (message.includes('\n')) {
        this.messageContainer.innerHTML = message.replace(/\n/g, '<br>');
      } else {
        this.messageContainer.textContent = message;
      }
      
      this.messageContainer.classList.remove('hidden');

      if (type === 'success') {
        setTimeout(() => this.hideMessage(), 10000);
      }
    }

    private addRetryButton(): void {
      if (this.messageContainer) {
        const retryButton = document.createElement('button');
        retryButton.textContent = 'üîÑ Retry Loading Workshops';
        retryButton.className = 'mt-2 px-4 py-2 bg-cyan-500 hover:bg-cyan-600 text-white rounded-lg text-sm font-medium transition-colors';
        retryButton.addEventListener('click', () => {
          this.messageContainer?.classList.add('hidden');
          this.loadWorkshops();
        });
        
        // Clear existing content and add message + retry button
        this.messageContainer.innerHTML = '';
        this.messageContainer.appendChild(document.createTextNode('Failed to load available workshops. '));
        this.messageContainer.appendChild(retryButton);
      }
    }

    private hideMessage(): void {
      this.messageContainer.classList.add('hidden');
    }

    private getAllowedDayNumbers(availableStartDays: string[]): number[] {
      const dayMap: { [key: string]: number } = {
        'sunday': 0, 'monday': 1, 'tuesday': 2, 'wednesday': 3,
        'thursday': 4, 'friday': 5, 'saturday': 6
      };
      
      return availableStartDays.map(day => dayMap[day.toLowerCase()]).filter(num => num !== undefined);
    }

    private getDateConstraintText(availableStartDays: string[]): string {
      const capitalizedDays = availableStartDays.map(day => 
        day.charAt(0).toUpperCase() + day.slice(1).toLowerCase()
      );
      
      if (capitalizedDays.length === 1) {
        return `${capitalizedDays[0]} only`;
      } else if (capitalizedDays.length === 2) {
        return `${capitalizedDays[0]} or ${capitalizedDays[1]}`;
      } else {
        const lastDay = capitalizedDays[capitalizedDays.length - 1];
        const otherDays = capitalizedDays.slice(0, -1);
        return `${otherDays.join(', ')}, or ${lastDay}`;
      }
    }

    private isDateInWorkshopRange(checkDate: Date, startDate: Date, duration: number): boolean {
      const endDate = new Date(startDate);
      endDate.setDate(startDate.getDate() + duration - 1);
      
      return checkDate >= startDate && checkDate <= endDate;
    }

    private validateForm(): boolean {
      const errors: string[] = [];

      const contactEmail = (document.getElementById('contact-email') as HTMLInputElement).value;
      const contactPhone = (document.getElementById('contact-phone') as HTMLInputElement).value;
      const contactFirstName = (document.getElementById('contact-first-name') as HTMLInputElement).value;
      const contactLastName = (document.getElementById('contact-last-name') as HTMLInputElement).value;

      if (!contactFirstName.trim()) {
        errors.push('Contact first name is required');
      }

      if (!contactLastName.trim()) {
        errors.push('Contact last name is required');
      }

      if (!this.validateEmail(contactEmail)) {
        errors.push('Contact email address is invalid');
      }

      if (!this.validatePhone(contactPhone)) {
        errors.push('Contact phone number is invalid');
      }

      const selectedOption = this.workshopSelect.selectedOptions[0];
      const serviceType = selectedOption?.dataset.type;
      
      if (serviceType === 'workshop') {
        const attendeeCount = parseInt(this.attendeeCountSelect.value);
        
        for (let i = 1; i <= attendeeCount; i++) {
          const firstName = (document.querySelector(`input[name="attendee-${i}-firstName"]`) as HTMLInputElement)?.value;
          const lastName = (document.querySelector(`input[name="attendee-${i}-lastName"]`) as HTMLInputElement)?.value;
          const email = (document.querySelector(`input[name="attendee-${i}-email"]`) as HTMLInputElement)?.value;

          if (!firstName?.trim()) {
            errors.push(`Attendee ${i}: First name is required`);
          }

          if (!lastName?.trim()) {
            errors.push(`Attendee ${i}: Last name is required`);
          }

          if (!this.validateEmail(email)) {
            errors.push(`Attendee ${i}: Email address is invalid`);
          }
        }
      }

      if (errors.length > 0) {
        this.showMessage('error', `Please fix the following errors:\n‚Ä¢ ${errors.join('\n‚Ä¢ ')}`);
        return false;
      }

      return true;
    }

    private validateEmail(email: string): boolean {
      if (!email || !email.trim()) {
        return false;
      }
      
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email.trim());
    }

    private validatePhone(phone: string): boolean {
      if (!phone || !phone.trim()) {
        return false;
      }
      
      const cleanPhone = phone.replace(/\D/g, '');
      return cleanPhone.length >= 10 && cleanPhone.length <= 15;
    }

    private handleServiceTypeChange(): void {
      const selectedOption = this.workshopSelect.selectedOptions[0];
      const serviceType = selectedOption?.dataset.type;
      
      const dateLabel = document.getElementById('date-label');
      const dateConstraint = document.getElementById('date-constraint');
      const customCalendar = document.getElementById('custom-calendar');
      const consultingDatePicker = document.getElementById('consulting-date-picker');
      const attendeeCountSection = document.getElementById('attendee-count-section');
      const consultingDurationSection = document.getElementById('consulting-duration-section');
      const attendeesContainer = document.getElementById('attendees-container');
      const includeContactSection = document.getElementById('include-contact-section');
      const submitButton = document.getElementById('book-workshop-btn');
      const submitButtonText = document.getElementById('btn-text');
      
        if (serviceType === 'consulting') {
        if (dateLabel) dateLabel.textContent = 'Session Date';
          if (dateConstraint) dateConstraint.textContent = '(Monday‚ÄìFriday, 9 AM ‚Äì 5 PM)';
        if (customCalendar) customCalendar.classList.add('hidden');
        if (consultingDatePicker) consultingDatePicker.classList.remove('hidden');
        if (attendeeCountSection) attendeeCountSection.classList.add('hidden');
        if (consultingDurationSection) consultingDurationSection.classList.remove('hidden');
        if (attendeesContainer) attendeesContainer.classList.add('hidden');
        if (includeContactSection) includeContactSection.classList.add('hidden');
        if (submitButtonText) submitButtonText.textContent = 'Book Consulting Session';
        
        const consultingDate = document.getElementById('consulting-date') as HTMLInputElement;
        const consultingTime = document.getElementById('consulting-time') as HTMLSelectElement;
        const consultingDuration = document.getElementById('consulting-duration') as HTMLSelectElement;
        if (consultingDate) consultingDate.required = true;
        if (consultingTime) consultingTime.required = true;
        if (consultingDuration) consultingDuration.required = true;
        
        this.dateInput.required = false;
        const attendeeCount = document.getElementById('attendee-count') as HTMLSelectElement;
        if (attendeeCount) attendeeCount.required = false;
        
      } else if (serviceType === 'workshop') {
        if (dateLabel) dateLabel.textContent = 'Workshop Date';
        if (dateConstraint) dateConstraint.textContent = '(Monday, Wednesday, Friday)';
        
        if (attendeeCountSection) attendeeCountSection.classList.remove('hidden');
        if (attendeesContainer) attendeesContainer.classList.remove('hidden');
        if (includeContactSection) includeContactSection.classList.remove('hidden');
        
        if (customCalendar) customCalendar.classList.remove('hidden');
        if (consultingDatePicker) consultingDatePicker.classList.add('hidden');
        if (consultingDurationSection) consultingDurationSection.classList.add('hidden');
        if (submitButtonText) submitButtonText.textContent = 'Book Workshop';
        
        this.dateInput.required = true;
        const attendeeCount = document.getElementById('attendee-count') as HTMLSelectElement;
        if (attendeeCount) attendeeCount.required = true;
        
        const consultingDate = document.getElementById('consulting-date') as HTMLInputElement;
        const consultingTime = document.getElementById('consulting-time') as HTMLSelectElement;
        const consultingDuration = document.getElementById('consulting-duration') as HTMLSelectElement;
        if (consultingDate) consultingDate.required = false;
        if (consultingTime) consultingTime.required = false;
        if (consultingDuration) consultingDuration.required = false;
        
        setTimeout(() => {
          this.updateAttendeeFields();
        }, 100);
        
      } else {
        if (customCalendar) customCalendar.classList.add('hidden');
        if (consultingDatePicker) consultingDatePicker.classList.add('hidden');
        if (attendeeCountSection) attendeeCountSection.classList.add('hidden');
        if (consultingDurationSection) consultingDurationSection.classList.add('hidden');
        if (attendeesContainer) attendeesContainer.classList.add('hidden');
        if (includeContactSection) includeContactSection.classList.add('hidden');
        if (submitButtonText) submitButtonText.textContent = 'Book Service';
      }
      
      setTimeout(() => this.saveToCache(), 500);
    }

    private updateAttendeeFields(): void {
      // üéØ CHECK IF AI CONSULTING IS SELECTED - HIDE ATTENDEE FIELDS
      const selectedWorkshop = this.workshopSelect.value;
      const isAIConsulting = selectedWorkshop === 'ai-consulting';
      
      // Hide/show attendee-related sections based on workshop type
      this.toggleAttendeeFieldsVisibility(isAIConsulting);
      
      // If AI consulting, don't process attendee fields
      if (isAIConsulting) {
        return;
      }
      
      const attendeeCount = parseInt(this.attendeeCountSelect.value);
      const includeContactCheckbox = document.getElementById('include-contact-as-attendee') as HTMLInputElement;
      const includeContact = includeContactCheckbox?.checked || false;
      
      this.saveCurrentAttendeeData();
      
      const container = this.attendeeFieldsContainer.querySelector('.attendee-fields') as HTMLElement;
      
      if (!container) {
        const fieldsDiv = document.createElement('div');
        fieldsDiv.className = 'attendee-fields space-y-4';
        this.attendeeFieldsContainer.appendChild(fieldsDiv);
      }

      const fieldsContainer = this.attendeeFieldsContainer.querySelector('.attendee-fields') as HTMLElement;
      fieldsContainer.innerHTML = '';

      let attendeeIndex = 1;
      
      if (includeContact) {
        const contactDiv = document.createElement('div');
        contactDiv.className = 'grid grid-cols-2 gap-4 p-4 bg-cyan-500/10 rounded-lg border border-cyan-400/30';
        
        const contactFirstName = (document.getElementById('contact-first-name') as HTMLInputElement)?.value || '';
        const contactLastName = (document.getElementById('contact-last-name') as HTMLInputElement)?.value || '';
        const contactEmail = (document.getElementById('contact-email') as HTMLInputElement)?.value || '';
        
        contactDiv.innerHTML = `
          <h5 class="col-span-2 text-cyan-300 font-semibold flex items-center">
            <span class="mr-2">üë§</span> Contact Person (Attendee ${attendeeIndex})
          </h5>
          <input type="text" name="attendee-${attendeeIndex}-firstName" placeholder="First Name" required
            value="${contactFirstName}"
            class="p-3 rounded-lg bg-black/30 border border-cyan-400/30 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all" readonly />
          <input type="text" name="attendee-${attendeeIndex}-lastName" placeholder="Last Name" required
            value="${contactLastName}"
            class="p-3 rounded-lg bg-black/30 border border-cyan-400/30 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all" readonly />
          <input type="email" name="attendee-${attendeeIndex}-email" placeholder="Email Address" required
            value="${contactEmail}"
            class="col-span-2 p-3 rounded-lg bg-black/30 border border-cyan-400/30 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all" readonly />
          <div class="col-span-2 text-xs text-cyan-300/70">
            ‚ÑπÔ∏è This information is automatically filled from your contact details above
          </div>
        `;
        fieldsContainer.appendChild(contactDiv);
        attendeeIndex++;
      }
      
      for (let i = attendeeIndex; i <= attendeeCount; i++) {
        const attendeeDiv = document.createElement('div');
        attendeeDiv.className = 'grid grid-cols-2 gap-4 p-4 bg-black/20 rounded-lg border border-indigo-500/20';
        
        const cachedData = this.attendeeDataCache.get(i) || { firstName: '', lastName: '', email: '' };
        
        attendeeDiv.innerHTML = `
          <h5 class="col-span-2 text-cyan-300 font-semibold">Attendee ${i}</h5>
          <input type="text" name="attendee-${i}-firstName" placeholder="First Name" required
            value="${cachedData.firstName}"
            class="p-3 rounded-lg bg-black/30 border border-indigo-500/30 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all" />
          <input type="text" name="attendee-${i}-lastName" placeholder="Last Name" required
            value="${cachedData.lastName}"
            class="p-3 rounded-lg bg-black/30 border border-indigo-500/30 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all" />
          <input type="email" name="attendee-${i}-email" placeholder="Email Address" required
            value="${cachedData.email}"
            class="col-span-2 p-3 rounded-lg bg-black/30 border border-indigo-500/30 text-white placeholder-gray-400 focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all" />
        `;
        fieldsContainer.appendChild(attendeeDiv);
      }
      
      this.setupAttendeeFieldListeners();
    }

    private saveCurrentAttendeeData(): void {
      const currentFields = this.attendeeFieldsContainer.querySelectorAll('.attendee-fields > div');
      
      currentFields.forEach((attendeeDiv, index) => {
        const attendeeNumber = index + 1;
        const firstName = (attendeeDiv.querySelector(`input[name="attendee-${attendeeNumber}-firstName"]`) as HTMLInputElement)?.value || '';
        const lastName = (attendeeDiv.querySelector(`input[name="attendee-${attendeeNumber}-lastName"]`) as HTMLInputElement)?.value || '';
        const email = (attendeeDiv.querySelector(`input[name="attendee-${attendeeNumber}-email"]`) as HTMLInputElement)?.value || '';
        
        if (firstName || lastName || email) {
          this.attendeeDataCache.set(attendeeNumber, { firstName, lastName, email });
        }
      });
    }

    private setupAttendeeFieldListeners(): void {
      const attendeeInputs = this.attendeeFieldsContainer.querySelectorAll('input[name^="attendee-"]');
      
      attendeeInputs.forEach(input => {
        input.addEventListener('input', () => {
          this.saveCurrentAttendeeData();
          this.validateFieldRealTime(input as HTMLInputElement);
        });
        
        input.addEventListener('blur', () => {
          this.validateFieldRealTime(input as HTMLInputElement);
        });
      });
    }

    private validateFieldRealTime(field: HTMLInputElement): void {
      const value = field.value.trim();
      const fieldName = field.name;
      let isValid = true;
      let errorMessage = '';

      if (field.type === 'email' || fieldName.includes('email')) {
        if (value && !this.validateEmail(value)) {
          isValid = false;
          errorMessage = 'Invalid email format';
        }
      }

      if (field.type === 'tel' || fieldName.includes('phone')) {
        if (value && !this.validatePhone(value)) {
          isValid = false;
          errorMessage = 'Phone number must be 10-15 digits';
        }
      }

      if (fieldName.includes('firstName') || fieldName.includes('lastName')) {
        if (value && value.length < 2) {
          isValid = false;
          errorMessage = 'Name must be at least 2 characters';
        }
      }

      if (value && !isValid) {
        field.classList.add('border-red-500', 'ring-red-500/20');
        field.classList.remove('border-indigo-500/30', 'border-cyan-400');
        this.showFieldError(field, errorMessage);
      } else {
        field.classList.remove('border-red-500', 'ring-red-500/20');
        field.classList.add('border-indigo-500/30');
        this.hideFieldError(field);
      }
    }

    private showFieldError(field: HTMLInputElement, message: string): void {
      this.hideFieldError(field);
      
      const errorDiv = document.createElement('div');
      errorDiv.className = 'field-error text-xs text-red-400 mt-1';
      errorDiv.textContent = `‚ö†Ô∏è ${message}`;
      
      field.parentNode?.insertBefore(errorDiv, field.nextSibling);
    }

    private hideFieldError(field: HTMLInputElement): void {
      const existingError = field.parentNode?.querySelector('.field-error');
      if (existingError) {
        existingError.remove();
      }
    }

    // ===== PERSISTENT CACHE SYSTEM (UNCHANGED) =====
    private saveToCache(): void {
      try {
        this.formCache.timestamp = Date.now();
        
        this.formCache.formData.productId = this.workshopSelect.value;
        this.formCache.formData.startDate = this.dateInput.value;
        this.formCache.formData.attendeeCount = this.attendeeCountSelect.value;
        
        const contactFirstName = document.getElementById('contact-first-name') as HTMLInputElement;
        const contactLastName = document.getElementById('contact-last-name') as HTMLInputElement;
        const contactEmail = document.getElementById('contact-email') as HTMLInputElement;
        const contactPhone = document.getElementById('contact-phone') as HTMLInputElement;
        const couponCode = document.getElementById('coupon-code') as HTMLInputElement;
        const includeContactCheckbox = document.getElementById('include-contact-as-attendee') as HTMLInputElement;
        
        if (contactFirstName) this.formCache.formData.contactFirstName = contactFirstName.value;
        if (contactLastName) this.formCache.formData.contactLastName = contactLastName.value;
        if (contactEmail) this.formCache.formData.contactEmail = contactEmail.value;
        if (contactPhone) this.formCache.formData.contactPhone = contactPhone.value;
        if (couponCode) this.formCache.formData.couponCode = couponCode.value;
        if (includeContactCheckbox) this.formCache.formData.includeContactAsAttendee = includeContactCheckbox.checked;
        
        const consultingDate = document.getElementById('consulting-date') as HTMLInputElement;
        const consultingTime = document.getElementById('consulting-time') as HTMLSelectElement;
        const consultingDuration = document.getElementById('consulting-duration') as HTMLSelectElement;
        
        if (consultingDate) this.formCache.formData.consultingDate = consultingDate.value;
        if (consultingTime) this.formCache.formData.consultingTime = consultingTime.value;
        if (consultingDuration) this.formCache.formData.consultingDuration = consultingDuration.value;
        
        this.saveCurrentAttendeeData();
        this.formCache.formData.attendees = Object.fromEntries(this.attendeeDataCache);
        
        localStorage.setItem(EventDrivenBookingWidget.CACHE_KEY, JSON.stringify(this.formCache));
        
        this.showCacheFeedback('üíæ Form saved automatically');
        
      } catch (error) {
        console.warn('Failed to save form cache:', error);
      }
    }

    private restoreFromCache(): void {
      try {
        const cachedData = localStorage.getItem(EventDrivenBookingWidget.CACHE_KEY);
        if (!cachedData) return;
        
        const cache = JSON.parse(cachedData);
        
        if (cache.version !== EventDrivenBookingWidget.CACHE_VERSION) {
          this.clearCache();
          return;
        }
        
        const cacheAge = Date.now() - cache.timestamp;
        const maxAge = 24 * 60 * 60 * 1000;
        
        if (cacheAge > maxAge) {
          this.clearCache();
          return;
        }
        
        this.formCache = cache;
        
        if (cache.formData.productId) this.workshopSelect.value = cache.formData.productId;
        if (cache.formData.startDate) this.dateInput.value = cache.formData.startDate;
        if (cache.formData.attendeeCount) this.attendeeCountSelect.value = cache.formData.attendeeCount;
        
        this.restoreField('contact-first-name', cache.formData.contactFirstName);
        this.restoreField('contact-last-name', cache.formData.contactLastName);
        this.restoreField('contact-email', cache.formData.contactEmail);
        this.restoreField('contact-phone', cache.formData.contactPhone);
        this.restoreField('coupon-code', cache.formData.couponCode);
        
        const includeContactCheckbox = document.getElementById('include-contact-as-attendee') as HTMLInputElement;
        if (includeContactCheckbox) includeContactCheckbox.checked = cache.formData.includeContactAsAttendee;
        
        this.restoreField('consulting-date', cache.formData.consultingDate);
        this.restoreField('consulting-time', cache.formData.consultingTime);
        this.restoreField('consulting-duration', cache.formData.consultingDuration);
        
        this.attendeeDataCache.clear();
        Object.entries(cache.formData.attendees || {}).forEach(([key, value]) => {
          this.attendeeDataCache.set(parseInt(key), value as any);
        });
        
        if (cache.formData.startDate && cache.formData.productId) {
          this.selectedDate = new Date(cache.formData.startDate);
          this.handleServiceTypeChange();
          
          if (this.workshopSelect.value && this.selectedDate) {
            this.updateAvailableDates();
          }
        }
        
      } catch (error) {
        console.warn('Failed to restore form cache:', error);
        this.clearCache();
      }
    }

    private restoreField(fieldId: string, value: string): void {
      if (!value) return;
      
      const field = document.getElementById(fieldId) as HTMLInputElement | HTMLSelectElement;
      if (field) {
        field.value = value;
        field.classList.add('border-yellow-400/50');
        setTimeout(() => {
          field.classList.remove('border-yellow-400/50');
        }, 2000);
      }
    }

    private clearCache(): void {
      try {
        localStorage.removeItem(EventDrivenBookingWidget.CACHE_KEY);
        this.attendeeDataCache.clear();
        this.formCache.formData = {
          productId: '', startDate: '', attendeeCount: '1',
          contactFirstName: '', contactLastName: '', contactEmail: '', contactPhone: '',
          couponCode: '', includeContactAsAttendee: false,
          consultingDate: '', consultingTime: '', consultingDuration: '',
          attendees: {}
        };
      } catch (error) {
        console.warn('Failed to clear form cache:', error);
      }
    }

    private hasCachedData(): boolean {
      const cache = this.formCache.formData;
      return !!(
        cache.productId || cache.contactFirstName || cache.contactEmail ||
        cache.consultingDate || Object.keys(cache.attendees).length > 0
      );
    }

    private showCacheRestorationMessage(): void {
      const cacheAge = Date.now() - this.formCache.timestamp;
      const minutes = Math.floor(cacheAge / (1000 * 60));
      const timeText = minutes < 60 ? `${minutes} minutes ago` : 
                     minutes < 1440 ? `${Math.floor(minutes / 60)} hours ago` : 'recently';
      
      this.showMessage('success', `‚ú® Welcome back! Your form data from ${timeText} has been restored. You can continue where you left off.`);
      
      setTimeout(() => this.hideMessage(), 8000);
    }

    private showCacheFeedback(message: string): void {
      let feedback = document.getElementById('cache-feedback');
      if (!feedback) {
        feedback = document.createElement('div');
        feedback.id = 'cache-feedback';
        feedback.className = 'fixed bottom-4 right-4 bg-green-600/20 border border-green-500/30 text-green-300 px-3 py-2 rounded-lg text-sm backdrop-blur-sm z-50 transition-all duration-300';
        document.body.appendChild(feedback);
      }
      
      feedback.textContent = message;
      feedback.style.opacity = '1';
      
      setTimeout(() => {
        feedback.style.opacity = '0';
        setTimeout(() => feedback.remove(), 300);
      }, 2000);
    }

    private setupAutoSave(): void {
      let lastSaveTime = 0;
      const autoSaveInterval = 10000;
      
      const autoSave = () => {
        const now = Date.now();
        if (now - lastSaveTime > autoSaveInterval) {
          this.saveToCache();
          lastSaveTime = now;
        }
      };
      
      const allInputs = this.form.querySelectorAll('input, select, textarea');
      allInputs.forEach(input => {
        input.addEventListener('input', () => {
          clearTimeout(this.saveTimeout);
          this.saveTimeout = setTimeout(() => this.saveToCache(), 1000);
        });
        
        input.addEventListener('change', () => this.saveToCache());
      });
      
      document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
          this.saveToCache();
        }
      });
      
      window.addEventListener('beforeunload', () => {
        this.saveToCache();
      });
    }
    
    private saveTimeout: number = 0;
  }

  // üéØ INITIALIZE EVENT-DRIVEN BOOKING WIDGET
  document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Initializing Event-Driven Booking Widget...');
    new EventDrivenBookingWidget();
    console.log('‚úÖ Event-Driven Booking Widget ready!');
  });
</script>
