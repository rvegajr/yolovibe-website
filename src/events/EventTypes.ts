/**
 * üéØ EVENT TYPE DEFINITIONS
 * 
 * This file defines ALL event types used throughout the application.
 * Organized by scope (Global vs Local) and category for easy maintenance.
 */

/**
 * üåç GLOBAL EVENT TYPES - Affect ALL application instances
 */
export const GlobalEventTypes = {
  // Authentication & Security Events
  AUTH_LOGOUT: 'AUTH_LOGOUT',
  AUTH_SESSION_EXPIRED: 'AUTH_SESSION_EXPIRED', 
  AUTH_FORCE_LOGOUT: 'AUTH_FORCE_LOGOUT',
  AUTH_SECURITY_VIOLATION: 'AUTH_SECURITY_VIOLATION',
  
  // System-Wide Events
  SYSTEM_MAINTENANCE_MODE: 'SYSTEM_MAINTENANCE_MODE',
  SYSTEM_EMERGENCY_SHUTDOWN: 'SYSTEM_EMERGENCY_SHUTDOWN',
  SYSTEM_UPDATE_AVAILABLE: 'SYSTEM_UPDATE_AVAILABLE',
  
  // User Preferences (sync across instances)
  USER_THEME_CHANGED: 'USER_THEME_CHANGED',
  USER_LANGUAGE_CHANGED: 'USER_LANGUAGE_CHANGED',
  USER_PREFERENCES_UPDATED: 'USER_PREFERENCES_UPDATED',
  
  // Critical Data Updates
  DATA_CRITICAL_UPDATE: 'DATA_CRITICAL_UPDATE',
  DATA_SCHEMA_MIGRATION: 'DATA_SCHEMA_MIGRATION'
} as const;

/**
 * ü™ü LOCAL EVENT TYPES - Instance-specific events
 */
export const LocalEventTypes = {
  // Authentication Success (instance-specific)
  AUTH_LOGIN_SUCCESS: 'AUTH_LOGIN_SUCCESS',
  AUTH_TOKEN_REFRESHED: 'AUTH_TOKEN_REFRESHED',
  AUTH_REDIRECT_REQUIRED: 'AUTH_REDIRECT_REQUIRED',
  
  // Workshop & Booking Events
  WORKSHOP_SELECTED: 'WORKSHOP_SELECTED',
  DATE_SELECTED: 'DATE_SELECTED', 
  BOOKING_SUBMITTED: 'BOOKING_SUBMITTED',
  BOOKING_UPDATED: 'BOOKING_UPDATED',
  BOOKING_CANCELLED: 'BOOKING_CANCELLED',
  BOOKING_CONFIRMED: 'BOOKING_CONFIRMED',
  
  // Attendee Management Events
  ATTENDEE_ADDED: 'ATTENDEE_ADDED',
  ATTENDEE_UPDATED: 'ATTENDEE_UPDATED',
  ATTENDEE_REMOVED: 'ATTENDEE_REMOVED',
  ATTENDEE_ACCESS_GENERATED: 'ATTENDEE_ACCESS_GENERATED',
  
  // Payment Events
  PAYMENT_INITIATED: 'PAYMENT_INITIATED',
  PAYMENT_COMPLETED: 'PAYMENT_COMPLETED',
  PAYMENT_FAILED: 'PAYMENT_FAILED',
  COUPON_APPLIED: 'COUPON_APPLIED',
  COUPON_VALIDATED: 'COUPON_VALIDATED',
  
  // CRUD Operations
  USER_CREATED: 'USER_CREATED',
  USER_UPDATED: 'USER_UPDATED',
  USER_DELETED: 'USER_DELETED',
  WORKSHOP_CREATED: 'WORKSHOP_CREATED',
  WORKSHOP_UPDATED: 'WORKSHOP_UPDATED',
  WORKSHOP_DELETED: 'WORKSHOP_DELETED',
  MATERIAL_UPLOADED: 'MATERIAL_UPLOADED',
  MATERIAL_DELETED: 'MATERIAL_DELETED',
  
  // Navigation & UI Events
  PAGE_NAVIGATION: 'PAGE_NAVIGATION',
  TAB_CHANGED: 'TAB_CHANGED',
  MODAL_OPENED: 'MODAL_OPENED',
  MODAL_CLOSED: 'MODAL_CLOSED',
  FILTER_APPLIED: 'FILTER_APPLIED',
  SEARCH_PERFORMED: 'SEARCH_PERFORMED',
  
  // Dashboard Events
  DASHBOARD_UPDATED: 'DASHBOARD_UPDATED',
  DASHBOARD_TAB_CHANGED: 'DASHBOARD_TAB_CHANGED',
  DASHBOARD_WORKSHOP_SELECTED: 'DASHBOARD_WORKSHOP_SELECTED',
  DASHBOARD_METRICS_REFRESHED: 'DASHBOARD_METRICS_REFRESHED',
  
  // Analytics & Tracking Events
  USER_INTERACTION: 'USER_INTERACTION',
  PAGE_VIEWED: 'PAGE_VIEWED',
  BUTTON_CLICKED: 'BUTTON_CLICKED',
  FORM_SUBMITTED: 'FORM_SUBMITTED',
  ERROR_OCCURRED: 'ERROR_OCCURRED',
  PERFORMANCE_METRIC: 'PERFORMANCE_METRIC',
  
  // Email & Communication Events
  EMAIL_SENT: 'EMAIL_SENT',
  EMAIL_DELIVERED: 'EMAIL_DELIVERED',
  EMAIL_FAILED: 'EMAIL_FAILED',
  NOTIFICATION_SENT: 'NOTIFICATION_SENT',
  
  // Calendar Events
  CALENDAR_EVENT_CREATED: 'CALENDAR_EVENT_CREATED',
  CALENDAR_EVENT_UPDATED: 'CALENDAR_EVENT_UPDATED',
  CALENDAR_EVENT_DELETED: 'CALENDAR_EVENT_DELETED',
  DATE_BLOCKED: 'DATE_BLOCKED',
  DATE_UNBLOCKED: 'DATE_UNBLOCKED',
  
  // System Performance Events
  SLOW_QUERY_DETECTED: 'SLOW_QUERY_DETECTED',
  CACHE_INVALIDATED: 'CACHE_INVALIDATED',
  BACKUP_COMPLETED: 'BACKUP_COMPLETED',
  REPORT_GENERATED: 'REPORT_GENERATED',
  
  // Batch Processing Events
  BATCH_PROCESS_STARTED: 'BATCH_PROCESS_STARTED',
  BATCH_PROCESS_COMPLETED: 'BATCH_PROCESS_COMPLETED',
  BATCH_PROCESS_FAILED: 'BATCH_PROCESS_FAILED'
} as const;

/**
 * Combined event types for type safety
 */
export const EventTypes = {
  ...GlobalEventTypes,
  ...LocalEventTypes
} as const;

/**
 * Event type unions for TypeScript
 */
export type GlobalEventType = typeof GlobalEventTypes[keyof typeof GlobalEventTypes];
export type LocalEventType = typeof LocalEventTypes[keyof typeof LocalEventTypes];
export type EventType = typeof EventTypes[keyof typeof EventTypes]; 