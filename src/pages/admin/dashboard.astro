---
import Layout from '../../layouts/Layout.astro';
import Container from '../../components/container.astro';

// This page requires authentication - in production you'd check auth here
const title = 'Admin Dashboard - YOLOVibe';
const description = 'YOLOVibe administrative dashboard with system monitoring, usage tracking, and task management';
---

<Layout title={title} description={description}>
  <Container>
    <div class="min-h-screen bg-gray-50 py-8">
      <!-- Dashboard Header -->
      <div class="mb-8">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">Admin Dashboard</h1>
            <p class="text-gray-600 mt-1">System overview and management</p>
          </div>
          <div class="flex items-center space-x-4">
            <div class="text-sm text-gray-500">
              Last updated: <span id="last-updated">--</span>
            </div>
            <button 
              id="refresh-dashboard"
              class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
            >
              üîÑ Refresh
            </button>
          </div>
        </div>
      </div>

      <!-- System Status Banner -->
      <div id="system-status-banner" class="mb-6">
        <!-- Populated by JavaScript -->
      </div>

      <!-- Dashboard Grid -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        
        <!-- Database Usage Widget (Large) -->
        <div class="lg:col-span-2">
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div class="flex items-center justify-between mb-4">
              <h2 class="text-xl font-semibold text-gray-900">Database Usage</h2>
              <span id="usage-status" class="px-3 py-1 rounded-full text-sm font-medium">
                <!-- Status populated by JavaScript -->
              </span>
            </div>
            
            <!-- Usage Metrics -->
            <div class="space-y-4">
              <div>
                <div class="flex justify-between items-center mb-1">
                  <span class="text-sm font-medium text-gray-700">üìñ Reads</span>
                  <span id="reads-percent" class="text-sm text-gray-600">--</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div id="reads-bar" class="bg-green-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                </div>
              </div>
              
              <div>
                <div class="flex justify-between items-center mb-1">
                  <span class="text-sm font-medium text-gray-700">‚úçÔ∏è Writes</span>
                  <span id="writes-percent" class="text-sm text-gray-600">--</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div id="writes-bar" class="bg-blue-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                </div>
              </div>
              
              <div>
                <div class="flex justify-between items-center mb-1">
                  <span class="text-sm font-medium text-gray-700">üíæ Storage</span>
                  <span id="storage-percent" class="text-sm text-gray-600">--</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div id="storage-bar" class="bg-purple-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                </div>
              </div>
            </div>

            <!-- Usage Recommendations -->
            <div id="usage-recommendations" class="mt-4 p-3 bg-blue-50 rounded-lg hidden">
              <h4 class="text-sm font-medium text-blue-800 mb-2">üí° Optimization Recommendations</h4>
              <ul id="recommendations-list" class="text-sm text-blue-700 space-y-1">
                <!-- Populated by JavaScript -->
              </ul>
            </div>
          </div>
        </div>

        <!-- System Health Widget -->
        <div>
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">System Health</h2>
            
            <!-- Overall Status -->
            <div class="text-center mb-4">
              <div id="health-indicator" class="w-16 h-16 mx-auto rounded-full flex items-center justify-center text-2xl mb-2">
                <!-- Populated by JavaScript -->
              </div>
              <div id="health-status" class="text-lg font-medium">
                <!-- Populated by JavaScript -->
              </div>
              <div id="uptime" class="text-sm text-gray-600">
                <!-- Populated by JavaScript -->
              </div>
            </div>

            <!-- Service Checks -->
            <div id="service-checks" class="space-y-2">
              <!-- Populated by JavaScript -->
            </div>

            <!-- Performance Metrics -->
            <div class="mt-4 pt-4 border-t border-gray-200">
              <div class="grid grid-cols-2 gap-4 text-center">
                <div>
                  <div id="avg-response-time" class="text-lg font-semibold text-gray-900">--</div>
                  <div class="text-xs text-gray-600">Avg Response</div>
                </div>
                <div>
                  <div id="throughput" class="text-lg font-semibold text-gray-900">--</div>
                  <div class="text-xs text-gray-600">Requests/min</div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Admin Tasks Widget -->
        <div>
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div class="flex items-center justify-between mb-4">
              <h2 class="text-xl font-semibold text-gray-900">Tasks & Calendar</h2>
              <span id="overdue-badge" class="hidden bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                <!-- Populated by JavaScript -->
              </span>
            </div>
            
            <!-- Today's Tasks -->
            <div class="mb-4">
              <h3 class="text-sm font-medium text-gray-700 mb-2">Today's Tasks</h3>
              <div id="todays-tasks" class="space-y-2">
                <!-- Populated by JavaScript -->
              </div>
            </div>

            <!-- Upcoming Events -->
            <div>
              <h3 class="text-sm font-medium text-gray-700 mb-2">Upcoming Events</h3>
              <div id="upcoming-events" class="space-y-2">
                <!-- Populated by JavaScript -->
              </div>
            </div>
          </div>
        </div>

        <!-- System Activity Widget -->
        <div>
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">System Activity</h2>
            
            <div class="grid grid-cols-2 gap-4">
              <div class="text-center">
                <div id="active-users" class="text-2xl font-bold text-blue-600">--</div>
                <div class="text-xs text-gray-600">Active Users</div>
              </div>
              <div class="text-center">
                <div id="recent-bookings" class="text-2xl font-bold text-green-600">--</div>
                <div class="text-xs text-gray-600">Recent Bookings</div>
              </div>
              <div class="text-center">
                <div id="pending-payments" class="text-2xl font-bold text-yellow-600">--</div>
                <div class="text-xs text-gray-600">Pending Payments</div>
              </div>
              <div class="text-center">
                <div id="upcoming-workshops" class="text-2xl font-bold text-purple-600">--</div>
                <div class="text-xs text-gray-600">Upcoming Workshops</div>
              </div>
            </div>

            <div class="mt-4 pt-4 border-t border-gray-200">
              <div class="text-center">
                <div class="text-sm text-gray-600">Last Backup</div>
                <div id="last-backup" class="text-sm font-medium text-gray-900">--</div>
              </div>
            </div>
          </div>
        </div>

        <!-- Recent Events Widget -->
        <div>
          <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">Recent Events</h2>
            
            <div id="recent-events" class="space-y-3 max-h-80 overflow-y-auto">
              <!-- Populated by JavaScript -->
            </div>
          </div>
        </div>

      </div>

      <!-- Quick Actions Footer -->
      <div class="mt-8 bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h2 class="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h2>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
          <button onclick="window.open('/admin/bookings', '_blank')" class="flex items-center justify-center p-4 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors">
            <span class="text-blue-600">üìã Manage Bookings</span>
          </button>
          <button onclick="runUsageCheck()" class="flex items-center justify-center p-4 bg-green-50 hover:bg-green-100 rounded-lg transition-colors">
            <span class="text-green-600">üìä Usage Report</span>
          </button>
          <button onclick="createBackup()" class="flex items-center justify-center p-4 bg-purple-50 hover:bg-purple-100 rounded-lg transition-colors">
            <span class="text-purple-600">üíæ Create Backup</span>
          </button>
          <button onclick="window.open('/admin/settings', '_blank')" class="flex items-center justify-center p-4 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
            <span class="text-gray-600">‚öôÔ∏è Settings</span>
          </button>
        </div>
      </div>
    </div>
  </Container>

  <script>
    // Dashboard JavaScript
    class AdminDashboard {
      constructor() {
        this.refreshInterval = 30000; // 30 seconds
        this.init();
      }

      async init() {
        await this.loadDashboardData();
        this.setupEventListeners();
        this.startAutoRefresh();
      }

      async loadDashboardData() {
        try {
          const response = await fetch('/api/admin/dashboard');
          const data = await response.json();
          
          this.updateUsageWidget(data.usage);
          this.updateHealthWidget(data.health);
          this.updateTasksWidget(data.tasks, data.events);
          this.updateActivityWidget(data.activity);
          this.updateEventsWidget(data.systemEvents);
          this.updateSystemStatus(data.summary);
          
          document.getElementById('last-updated').textContent = new Date().toLocaleTimeString();
        } catch (error) {
          console.error('Failed to load dashboard data:', error);
          this.showError('Failed to load dashboard data');
        }
      }

      updateUsageWidget(usage) {
        // Update status badge
        const statusEl = document.getElementById('usage-status');
        const statusClasses = {
          safe: 'bg-green-100 text-green-800',
          warning: 'bg-yellow-100 text-yellow-800',
          critical: 'bg-red-100 text-red-800'
        };
        statusEl.className = `px-3 py-1 rounded-full text-sm font-medium ${statusClasses[usage.status]}`;
        statusEl.textContent = usage.status.toUpperCase();

        // Update progress bars
        this.updateProgressBar('reads', usage.readsUsedPercent);
        this.updateProgressBar('writes', usage.writesUsedPercent);
        this.updateProgressBar('storage', usage.storageUsedPercent);

        // Update recommendations
        if (usage.recommendations && usage.recommendations.length > 0) {
          const container = document.getElementById('usage-recommendations');
          const list = document.getElementById('recommendations-list');
          
          list.innerHTML = usage.recommendations.slice(0, 3).map(rec => 
            `<li>‚Ä¢ ${rec}</li>`
          ).join('');
          
          container.classList.remove('hidden');
        }
      }

      updateProgressBar(type, percentage) {
        const bar = document.getElementById(`${type}-bar`);
        const percent = document.getElementById(`${type}-percent`);
        
        bar.style.width = `${Math.min(100, percentage)}%`;
        percent.textContent = `${percentage.toFixed(1)}%`;
        
        // Update color based on percentage
        let colorClass = 'bg-green-500';
        if (percentage >= 90) colorClass = 'bg-red-500';
        else if (percentage >= 75) colorClass = 'bg-yellow-500';
        else if (type === 'writes') colorClass = 'bg-blue-500';
        else if (type === 'storage') colorClass = 'bg-purple-500';
        
        bar.className = `h-2 rounded-full transition-all duration-300 ${colorClass}`;
      }

      updateHealthWidget(health) {
        const indicator = document.getElementById('health-indicator');
        const status = document.getElementById('health-status');
        const uptime = document.getElementById('uptime');
        const checksContainer = document.getElementById('service-checks');
        
        // Update overall status
        const statusConfig = {
          healthy: { bg: 'bg-green-100', text: 'text-green-600', icon: '‚úÖ' },
          degraded: { bg: 'bg-yellow-100', text: 'text-yellow-600', icon: '‚ö†Ô∏è' },
          unhealthy: { bg: 'bg-red-100', text: 'text-red-600', icon: '‚ùå' }
        };
        
        const config = statusConfig[health.overall];
        indicator.className = `w-16 h-16 mx-auto rounded-full flex items-center justify-center text-2xl mb-2 ${config.bg}`;
        indicator.textContent = config.icon;
        status.className = `text-lg font-medium ${config.text}`;
        status.textContent = health.overall.toUpperCase();
        
        // Update uptime
        const uptimeHours = Math.floor(health.uptime / 3600);
        uptime.textContent = `Uptime: ${uptimeHours}h`;
        
        // Update service checks
        checksContainer.innerHTML = health.checks.map(check => {
          const statusIcon = check.status === 'healthy' ? 'üü¢' : 
                           check.status === 'degraded' ? 'üü°' : 'üî¥';
          return `
            <div class="flex items-center justify-between">
              <span class="text-sm text-gray-700">${statusIcon} ${check.service}</span>
              <span class="text-xs text-gray-500">${check.responseTime}ms</span>
            </div>
          `;
        }).join('');
        
        // Update performance metrics
        document.getElementById('avg-response-time').textContent = `${health.performance.avgResponseTime.toFixed(0)}ms`;
        document.getElementById('throughput').textContent = `${health.performance.throughput}`;
      }

      updateTasksWidget(tasks, events) {
        const todaysTasks = document.getElementById('todays-tasks');
        const upcomingEvents = document.getElementById('upcoming-events');
        
        // Update today's tasks
        const today = new Date().toDateString();
        const todaysTasksFiltered = tasks.filter(task => 
          new Date(task.dueDate).toDateString() === today
        );
        
        if (todaysTasksFiltered.length === 0) {
          todaysTasks.innerHTML = '<div class="text-sm text-gray-500 italic">No tasks for today</div>';
        } else {
          todaysTasks.innerHTML = todaysTasksFiltered.map(task => {
            const priorityColors = {
              urgent: 'text-red-600',
              high: 'text-orange-600',
              medium: 'text-blue-600',
              low: 'text-gray-600'
            };
            return `
              <div class="flex items-center justify-between p-2 bg-gray-50 rounded">
                <div class="flex-1">
                  <div class="text-sm font-medium ${priorityColors[task.priority]}">${task.title}</div>
                  <div class="text-xs text-gray-500">${task.type} ‚Ä¢ ${task.estimatedDuration || 15}min</div>
                </div>
                <button onclick="markTaskComplete('${task.id}')" class="text-green-600 hover:text-green-700">
                  ‚úì
                </button>
              </div>
            `;
          }).join('');
        }
        
        // Update upcoming events
        const nextEvents = events.slice(0, 3);
        if (nextEvents.length === 0) {
          upcomingEvents.innerHTML = '<div class="text-sm text-gray-500 italic">No upcoming events</div>';
        } else {
          upcomingEvents.innerHTML = nextEvents.map(event => {
            const eventDate = new Date(event.date);
            const isToday = eventDate.toDateString() === today;
            const dateStr = isToday ? 'Today' : eventDate.toLocaleDateString();
            
            return `
              <div class="p-2 bg-blue-50 rounded">
                <div class="text-sm font-medium text-blue-800">${event.title}</div>
                <div class="text-xs text-blue-600">${dateStr} ‚Ä¢ ${event.participants || 0} participants</div>
              </div>
            `;
          }).join('');
        }
      }

      updateActivityWidget(activity) {
        document.getElementById('active-users').textContent = activity.activeUsers;
        document.getElementById('recent-bookings').textContent = activity.recentBookings;
        document.getElementById('pending-payments').textContent = activity.pendingPayments;
        document.getElementById('upcoming-workshops').textContent = activity.upcomingWorkshops;
        
        const lastBackup = new Date(activity.lastBackup);
        const backupAge = Math.floor((Date.now() - lastBackup.getTime()) / (1000 * 60 * 60));
        document.getElementById('last-backup').textContent = `${backupAge}h ago`;
      }

      updateEventsWidget(events) {
        const container = document.getElementById('recent-events');
        
        if (events.length === 0) {
          container.innerHTML = '<div class="text-sm text-gray-500 italic">No recent events</div>';
          return;
        }
        
        container.innerHTML = events.map(event => {
          const severityIcons = {
            success: '‚úÖ',
            info: '‚ÑπÔ∏è',
            warning: '‚ö†Ô∏è',
            error: '‚ùå'
          };
          
          const timeAgo = this.getTimeAgo(new Date(event.timestamp));
          
          return `
            <div class="flex items-start space-x-3">
              <span class="text-lg">${severityIcons[event.severity]}</span>
              <div class="flex-1 min-w-0">
                <div class="text-sm font-medium text-gray-900">${event.message}</div>
                <div class="text-xs text-gray-500">${timeAgo}</div>
              </div>
            </div>
          `;
        }).join('');
      }

      updateSystemStatus(summary) {
        const banner = document.getElementById('system-status-banner');
        
        if (summary.criticalAlerts > 0 || summary.systemStatus !== 'operational') {
          const bgColor = summary.systemStatus === 'down' ? 'bg-red-100 border-red-200' :
                         summary.criticalAlerts > 0 ? 'bg-yellow-100 border-yellow-200' :
                         'bg-blue-100 border-blue-200';
          
          banner.innerHTML = `
            <div class="p-4 rounded-lg border ${bgColor}">
              <div class="flex items-center justify-between">
                <div>
                  <h3 class="font-medium">System Status: ${summary.systemStatus.toUpperCase()}</h3>
                  <p class="text-sm mt-1">
                    ${summary.criticalAlerts} critical alerts ‚Ä¢ 
                    ${summary.overdueTasks} overdue tasks ‚Ä¢ 
                    ${summary.todaysEvents} events today
                  </p>
                </div>
                <button onclick="dashboard.loadDashboardData()" class="text-sm underline">
                  Refresh Status
                </button>
              </div>
            </div>
          `;
        } else {
          banner.innerHTML = '';
        }
      }

      setupEventListeners() {
        document.getElementById('refresh-dashboard').addEventListener('click', () => {
          this.loadDashboardData();
        });
      }

      startAutoRefresh() {
        setInterval(() => {
          this.loadDashboardData();
        }, this.refreshInterval);
      }

      getTimeAgo(date) {
        const now = new Date();
        const diffMs = now - date;
        const diffMins = Math.floor(diffMs / 60000);
        const diffHours = Math.floor(diffMins / 60);
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffMins < 1) return 'Just now';
        if (diffMins < 60) return `${diffMins}m ago`;
        if (diffHours < 24) return `${diffHours}h ago`;
        return `${diffDays}d ago`;
      }

      showError(message) {
        // Simple error display
        console.error(message);
      }
    }

    // Global functions for quick actions
    window.markTaskComplete = async function(taskId) {
      try {
        await fetch(`/api/admin/tasks/${taskId}/complete`, { method: 'POST' });
        dashboard.loadDashboardData();
      } catch (error) {
        console.error('Failed to mark task complete:', error);
      }
    };

    window.runUsageCheck = function() {
      window.open('/admin/usage-report', '_blank');
    };

    window.createBackup = async function() {
      try {
        const response = await fetch('/api/admin/backup', { method: 'POST' });
        const result = await response.json();
        alert(`Backup created: ${result.backupId}`);
        dashboard.loadDashboardData();
      } catch (error) {
        alert('Failed to create backup');
      }
    };

    // Initialize dashboard
    const dashboard = new AdminDashboard();
    window.dashboard = dashboard;
  </script>
</Layout> 