---
import Layout from '../../layouts/Layout.astro';
import Container from '../../components/container.astro';

const title = 'Usage Report - Admin Dashboard';
const description = 'Detailed Turso database usage report and optimization recommendations';
---

<Layout title={title} description={description}>
  <Container>
    <div class="min-h-screen bg-gray-50 py-8">
      <!-- Header -->
      <div class="mb-8">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">Database Usage Report</h1>
            <p class="text-gray-600 mt-1">Detailed Turso usage analysis and optimization</p>
          </div>
          <div class="flex items-center space-x-4">
            <button 
              onclick="window.close()" 
              class="text-gray-600 hover:text-gray-800"
            >
              ‚Üê Back to Dashboard
            </button>
            <button 
              id="refresh-report"
              class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
            >
              üîÑ Refresh Report
            </button>
          </div>
        </div>
      </div>

      <!-- Usage Summary Cards -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <!-- Reads Usage -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-900">üìñ Monthly Reads</h3>
            <span id="reads-status" class="px-2 py-1 rounded text-sm font-medium">
              <!-- Status -->
            </span>
          </div>
          <div class="space-y-2">
            <div class="flex justify-between">
              <span class="text-gray-600">Used</span>
              <span id="reads-used" class="font-medium">--</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Limit</span>
              <span class="font-medium">500,000,000</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Remaining</span>
              <span id="reads-remaining" class="font-medium text-green-600">--</span>
            </div>
          </div>
          <div class="mt-4">
            <div class="w-full bg-gray-200 rounded-full h-3">
              <div id="reads-progress" class="bg-green-500 h-3 rounded-full transition-all duration-300" style="width: 0%"></div>
            </div>
            <div class="text-center mt-2">
              <span id="reads-percentage" class="text-sm font-medium">0%</span>
            </div>
          </div>
        </div>

        <!-- Writes Usage -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-900">‚úçÔ∏è Monthly Writes</h3>
            <span id="writes-status" class="px-2 py-1 rounded text-sm font-medium">
              <!-- Status -->
            </span>
          </div>
          <div class="space-y-2">
            <div class="flex justify-between">
              <span class="text-gray-600">Used</span>
              <span id="writes-used" class="font-medium">--</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Limit</span>
              <span class="font-medium">10,000,000</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Remaining</span>
              <span id="writes-remaining" class="font-medium text-green-600">--</span>
            </div>
          </div>
          <div class="mt-4">
            <div class="w-full bg-gray-200 rounded-full h-3">
              <div id="writes-progress" class="bg-blue-500 h-3 rounded-full transition-all duration-300" style="width: 0%"></div>
            </div>
            <div class="text-center mt-2">
              <span id="writes-percentage" class="text-sm font-medium">0%</span>
            </div>
          </div>
        </div>

        <!-- Storage Usage -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-900">üíæ Storage</h3>
            <span id="storage-status" class="px-2 py-1 rounded text-sm font-medium">
              <!-- Status -->
            </span>
          </div>
          <div class="space-y-2">
            <div class="flex justify-between">
              <span class="text-gray-600">Used</span>
              <span id="storage-used" class="font-medium">--</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Limit</span>
              <span class="font-medium">5.00 GB</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Remaining</span>
              <span id="storage-remaining" class="font-medium text-green-600">--</span>
            </div>
          </div>
          <div class="mt-4">
            <div class="w-full bg-gray-200 rounded-full h-3">
              <div id="storage-progress" class="bg-purple-500 h-3 rounded-full transition-all duration-300" style="width: 0%"></div>
            </div>
            <div class="text-center mt-2">
              <span id="storage-percentage" class="text-sm font-medium">0%</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Monthly Projection -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
        <h3 class="text-xl font-semibold text-gray-900 mb-4">üîÆ Monthly Projection</h3>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div>
            <h4 class="font-medium text-gray-900 mb-3">Current Progress</h4>
            <div class="space-y-2 text-sm">
              <div class="flex justify-between">
                <span class="text-gray-600">Days Elapsed</span>
                <span id="days-elapsed" class="font-medium">--</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Days Remaining</span>
                <span id="days-remaining" class="font-medium">--</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Month Progress</span>
                <span id="month-progress" class="font-medium">--%</span>
              </div>
            </div>
          </div>
          
          <div>
            <h4 class="font-medium text-gray-900 mb-3">End-of-Month Projection</h4>
            <div class="space-y-2 text-sm">
              <div class="flex justify-between">
                <span class="text-gray-600">Projected Reads</span>
                <span id="projected-reads" class="font-medium">--</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Projected Writes</span>
                <span id="projected-writes" class="font-medium">--</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Projected Storage</span>
                <span id="projected-storage" class="font-medium">--</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Projection Alert -->
        <div id="projection-alert" class="mt-6 hidden">
          <div class="p-4 rounded-lg border">
            <h4 class="font-medium mb-2">‚ö†Ô∏è Projection Warning</h4>
            <p id="projection-message" class="text-sm mb-3">--</p>
            <div id="potential-cost" class="text-sm font-medium">--</div>
          </div>
        </div>
      </div>

      <!-- Optimization Recommendations -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
        <h3 class="text-xl font-semibold text-gray-900 mb-4">üí° Optimization Recommendations</h3>
        
        <div id="recommendations-container">
          <!-- Populated by JavaScript -->
        </div>
      </div>

      <!-- Usage History Chart -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
        <h3 class="text-xl font-semibold text-gray-900 mb-4">üìà Usage Trends (Last 7 Days)</h3>
        
        <div class="space-y-4">
          <div>
            <h4 class="text-sm font-medium text-gray-700 mb-2">Daily Read Operations</h4>
            <div id="reads-chart" class="h-20 bg-gray-50 rounded flex items-end justify-between px-2">
              <!-- Chart bars populated by JavaScript -->
            </div>
          </div>
          
          <div>
            <h4 class="text-sm font-medium text-gray-700 mb-2">Daily Write Operations</h4>
            <div id="writes-chart" class="h-20 bg-gray-50 rounded flex items-end justify-between px-2">
              <!-- Chart bars populated by JavaScript -->
            </div>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 class="text-xl font-semibold text-gray-900 mb-4">üöÄ Quick Actions</h3>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button 
            onclick="runOptimization()" 
            class="p-4 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors text-center"
          >
            <div class="text-blue-600 font-medium">üîß Run Optimization</div>
            <div class="text-blue-500 text-sm mt-1">Analyze and optimize queries</div>
          </button>
          
          <button 
            onclick="createBackup()" 
            class="p-4 bg-green-50 hover:bg-green-100 rounded-lg transition-colors text-center"
          >
            <div class="text-green-600 font-medium">üíæ Create Backup</div>
            <div class="text-green-500 text-sm mt-1">Manual backup before changes</div>
          </button>
          
          <button 
            onclick="exportReport()" 
            class="p-4 bg-purple-50 hover:bg-purple-100 rounded-lg transition-colors text-center"
          >
            <div class="text-purple-600 font-medium">üìä Export Report</div>
            <div class="text-purple-500 text-sm mt-1">Download detailed report</div>
          </button>
        </div>
      </div>
    </div>
  </Container>

  <script>
    class UsageReportPage {
      constructor() {
        this.init();
      }

      async init() {
        await this.loadUsageData();
        this.setupEventListeners();
      }

      async loadUsageData() {
        try {
          // Simulate loading usage data (in production, this would call your usage API)
          const data = {
            usage: {
              readsUsedPercent: 2.1,
              writesUsedPercent: 0.5,
              storageUsedPercent: 3.2,
              status: 'safe',
              monthlyProjection: {
                willExceedLimits: false,
                exceedingMetrics: [],
                daysRemaining: 15
              },
              recommendations: [
                'Use SELECT with specific columns instead of SELECT *',
                'Implement result caching for frequently accessed data',
                'Consider pagination for large result sets',
                'Batch INSERT operations when possible'
              ]
            },
            projection: {
              daysElapsed: 16,
              daysInMonth: 31,
              projectedReads: 10500000,
              projectedWrites: 125000,
              projectedStorage: 0.8,
              willExceedLimits: false,
              exceedingMetrics: []
            },
            history: this.generateMockHistory()
          };

          this.updateUsageCards(data.usage);
          this.updateProjection(data.projection);
          this.updateRecommendations(data.usage.recommendations);
          this.updateCharts(data.history);

        } catch (error) {
          console.error('Failed to load usage data:', error);
        }
      }

      updateUsageCards(usage) {
        // Update reads
        this.updateUsageCard('reads', usage.readsUsedPercent, 500000000, 'green');
        
        // Update writes
        this.updateUsageCard('writes', usage.writesUsedPercent, 10000000, 'blue');
        
        // Update storage
        this.updateUsageCard('storage', usage.storageUsedPercent, 5, 'purple');
      }

      updateUsageCard(type, percentage, limit, color) {
        const used = Math.floor((percentage / 100) * limit);
        const remaining = limit - used;
        
        // Format numbers appropriately
        let usedFormatted, remainingFormatted, limitFormatted;
        
        if (type === 'storage') {
          usedFormatted = `${(used).toFixed(2)} GB`;
          remainingFormatted = `${(remaining).toFixed(2)} GB`;
          limitFormatted = `${limit.toFixed(2)} GB`;
        } else {
          usedFormatted = this.formatNumber(used);
          remainingFormatted = this.formatNumber(remaining);
          limitFormatted = this.formatNumber(limit);
        }
        
        document.getElementById(`${type}-used`).textContent = usedFormatted;
        document.getElementById(`${type}-remaining`).textContent = remainingFormatted;
        document.getElementById(`${type}-percentage`).textContent = `${percentage.toFixed(1)}%`;
        
        // Update progress bar
        const progressBar = document.getElementById(`${type}-progress`);
        progressBar.style.width = `${Math.min(100, percentage)}%`;
        
        // Update status and color
        const status = document.getElementById(`${type}-status`);
        let statusText = 'Safe';
        let statusClass = 'bg-green-100 text-green-800';
        let barColor = `bg-${color}-500`;
        
        if (percentage >= 90) {
          statusText = 'Critical';
          statusClass = 'bg-red-100 text-red-800';
          barColor = 'bg-red-500';
        } else if (percentage >= 75) {
          statusText = 'Warning';
          statusClass = 'bg-yellow-100 text-yellow-800';
          barColor = 'bg-yellow-500';
        }
        
        status.textContent = statusText;
        status.className = `px-2 py-1 rounded text-sm font-medium ${statusClass}`;
        progressBar.className = `h-3 rounded-full transition-all duration-300 ${barColor}`;
      }

      updateProjection(projection) {
        document.getElementById('days-elapsed').textContent = projection.daysElapsed;
        document.getElementById('days-remaining').textContent = projection.daysRemaining;
        document.getElementById('month-progress').textContent = 
          `${((projection.daysElapsed / projection.daysInMonth) * 100).toFixed(1)}%`;
        
        document.getElementById('projected-reads').textContent = this.formatNumber(projection.projectedReads);
        document.getElementById('projected-writes').textContent = this.formatNumber(projection.projectedWrites);
        document.getElementById('projected-storage').textContent = `${projection.projectedStorage.toFixed(2)} GB`;
        
        // Show alert if projecting to exceed limits
        if (projection.willExceedLimits) {
          const alert = document.getElementById('projection-alert');
          const message = document.getElementById('projection-message');
          const cost = document.getElementById('potential-cost');
          
          message.textContent = `Projected to exceed limits: ${projection.exceedingMetrics.join(', ')}`;
          cost.textContent = 'Estimated overage cost: $0.00 (Enable overages or optimize usage)';
          
          alert.classList.remove('hidden');
          alert.firstElementChild.className = 'p-4 rounded-lg border bg-yellow-50 border-yellow-200';
        }
      }

      updateRecommendations(recommendations) {
        const container = document.getElementById('recommendations-container');
        
        if (recommendations.length === 0) {
          container.innerHTML = '<p class="text-gray-500 italic">No optimization recommendations at this time. Your usage is efficient!</p>';
          return;
        }
        
        container.innerHTML = `
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            ${recommendations.map((rec, index) => `
              <div class="p-4 bg-blue-50 rounded-lg border border-blue-200">
                <div class="flex items-start space-x-3">
                  <span class="flex-shrink-0 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-medium">
                    ${index + 1}
                  </span>
                  <p class="text-blue-800 text-sm">${rec}</p>
                </div>
              </div>
            `).join('')}
          </div>
        `;
      }

      updateCharts(history) {
        // Simple bar charts for read/write history
        this.createChart('reads-chart', history.map(h => h.reads), 'bg-green-500');
        this.createChart('writes-chart', history.map(h => h.writes), 'bg-blue-500');
      }

      createChart(containerId, data, barColor) {
        const container = document.getElementById(containerId);
        const maxValue = Math.max(...data);
        
        container.innerHTML = data.map((value, index) => {
          const height = maxValue > 0 ? (value / maxValue) * 60 : 0;
          return `
            <div class="flex flex-col items-center space-y-1">
              <div class="${barColor} rounded-t" style="width: 20px; height: ${height}px;"></div>
              <span class="text-xs text-gray-500">${index + 1}</span>
            </div>
          `;
        }).join('');
      }

      generateMockHistory() {
        // Generate 7 days of mock data
        const history = [];
        for (let i = 6; i >= 0; i--) {
          const baseReads = Math.floor(Math.random() * 50000) + 10000;
          const baseWrites = Math.floor(Math.random() * 1000) + 100;
          
          history.push({
            date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
            reads: baseReads,
            writes: baseWrites
          });
        }
        return history;
      }

      formatNumber(num) {
        if (num >= 1000000000) {
          return (num / 1000000000).toFixed(1) + 'B';
        }
        if (num >= 1000000) {
          return (num / 1000000).toFixed(1) + 'M';
        }
        if (num >= 1000) {
          return (num / 1000).toFixed(1) + 'K';
        }
        return num.toString();
      }

      setupEventListeners() {
        document.getElementById('refresh-report').addEventListener('click', () => {
          this.loadUsageData();
        });
      }
    }

    // Global functions
    window.runOptimization = function() {
      alert('Optimization analysis would run here. Check console for query analysis.');
      console.log('Running database optimization analysis...');
    };

    window.createBackup = async function() {
      try {
        const response = await fetch('/api/admin/backup', { method: 'POST' });
        const result = await response.json();
        alert(`Backup created: ${result.backupId}`);
      } catch (error) {
        alert('Failed to create backup');
      }
    };

    window.exportReport = function() {
      // Generate and download report
      const reportData = {
        timestamp: new Date().toISOString(),
        usage: 'Current usage data would be here',
        recommendations: 'Optimization recommendations'
      };
      
      const blob = new Blob([JSON.stringify(reportData, null, 2)], { 
        type: 'application/json' 
      });
      
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `usage-report-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    };

    // Initialize the page
    new UsageReportPage();
  </script>
</Layout> 