---
/**
 * Admin Calendar Management Page
 * Simple interface for blocking/unblocking dates
 * Uses existing CalendarManagerDB for database operations
 */

import Layout from '../../layouts/Layout.astro';
import Container from '../../components/container.astro';
import Sectionhead from '../../components/sectionhead.astro';

const title = "Admin Calendar Management";
const subtitle = "Block and manage availability for workshops and consulting sessions";
---

<Layout title={title}>
  <Container>
    <Sectionhead>
      <Fragment slot="title">üóìÔ∏è Calendar Management</Fragment>
      <Fragment slot="desc">
        {subtitle}
      </Fragment>
    </Sectionhead>

    <div class="mx-auto max-w-6xl">
      <!-- Quick Actions -->
      <div class="mb-8 bg-white rounded-lg shadow-md p-6">
        <h2 class="text-2xl font-bold mb-4">Quick Actions</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button 
            onclick="blockToday()"
            class="bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-lg transition-colors"
          >
            üö´ Block Today
          </button>
          <button 
            onclick="blockTomorrow()"
            class="bg-orange-500 hover:bg-orange-600 text-white font-bold py-3 px-6 rounded-lg transition-colors"
          >
            ‚è∞ Block Tomorrow
          </button>
          <button 
            onclick="blockWeekend()"
            class="bg-purple-500 hover:bg-purple-600 text-white font-bold py-3 px-6 rounded-lg transition-colors"
          >
            üèñÔ∏è Block This Weekend
          </button>
        </div>
      </div>

      <!-- Manual Date Blocking -->
      <div class="mb-8 bg-white rounded-lg shadow-md p-6">
        <h2 class="text-2xl font-bold mb-4">Block Specific Date</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="blockDate" class="block text-sm font-medium text-gray-700 mb-2">
              Select Date to Block
            </label>
            <input 
              type="date" 
              id="blockDate"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              min={new Date().toISOString().split('T')[0]}
            />
          </div>
          <div>
            <label for="blockReason" class="block text-sm font-medium text-gray-700 mb-2">
              Reason for Blocking
            </label>
            <input 
              type="text" 
              id="blockReason"
              placeholder="e.g., Personal Day, Holiday, Maintenance"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
        <button 
          onclick="blockCustomDate()"
          class="mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-lg transition-colors"
        >
          Block Date
        </button>
      </div>

      <!-- Date Range Blocking -->
      <div class="mb-8 bg-white rounded-lg shadow-md p-6">
        <h2 class="text-2xl font-bold mb-4">Block Date Range</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label for="startDate" class="block text-sm font-medium text-gray-700 mb-2">
              Start Date
            </label>
            <input 
              type="date" 
              id="startDate"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              min={new Date().toISOString().split('T')[0]}
            />
          </div>
          <div>
            <label for="endDate" class="block text-sm font-medium text-gray-700 mb-2">
              End Date
            </label>
            <input 
              type="date" 
              id="endDate"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              min={new Date().toISOString().split('T')[0]}
            />
          </div>
          <div>
            <label for="rangeReason" class="block text-sm font-medium text-gray-700 mb-2">
              Reason
            </label>
            <input 
              type="text" 
              id="rangeReason"
              placeholder="e.g., Vacation, Conference"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
        <button 
          onclick="blockDateRange()"
          class="mt-4 bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-6 rounded-lg transition-colors"
        >
          Block Date Range
        </button>
      </div>

      <!-- Current Blocks -->
      <div class="mb-8 bg-white rounded-lg shadow-md p-6">
        <h2 class="text-2xl font-bold mb-4">Current Blocked Dates</h2>
        <div class="mb-4">
          <button 
            onclick="loadBlockedDates()"
            class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition-colors"
          >
            üîÑ Refresh List
          </button>
        </div>
        <div id="blockedDatesList" class="space-y-2">
          <p class="text-gray-500 italic">Click "Refresh List" to load blocked dates</p>
        </div>
      </div>

      <!-- Status Messages -->
      <div id="statusMessages" class="mb-8"></div>
    </div>
  </Container>
</Layout>

<script>
  // Admin Calendar Management Functions
  
  function showMessage(message, type = 'info') {
    const container = document.getElementById('statusMessages');
    const messageDiv = document.createElement('div');
    
    const bgColor = type === 'error' ? 'bg-red-100 border-red-400 text-red-700' : 
                   type === 'success' ? 'bg-green-100 border-green-400 text-green-700' :
                   'bg-blue-100 border-blue-400 text-blue-700';
    
    messageDiv.className = `${bgColor} border px-4 py-3 rounded mb-4`;
    messageDiv.innerHTML = `
      <div class="flex justify-between items-center">
        <span>${message}</span>
        <button onclick="this.parentElement.parentElement.remove()" class="font-bold ml-4">√ó</button>
      </div>
    `;
    
    container.appendChild(messageDiv);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      if (messageDiv.parentElement) {
        messageDiv.remove();
      }
    }, 5000);
  }

  async function blockToday() {
    try {
      const today = new Date().toISOString().split('T')[0];
      const response = await fetch('/api/admin/calendar/block', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          date: today,
          reason: 'Admin Block - Today'
        })
      });
      
      if (response.ok) {
        showMessage('‚úÖ Today has been blocked successfully!', 'success');
        loadBlockedDates();
      } else {
        showMessage('‚ùå Failed to block today. Please try again.', 'error');
      }
    } catch (error) {
      showMessage('‚ùå Error blocking today: ' + error.message, 'error');
    }
  }

  async function blockTomorrow() {
    try {
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      const tomorrowStr = tomorrow.toISOString().split('T')[0];
      
      const response = await fetch('/api/admin/calendar/block', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          date: tomorrowStr,
          reason: 'Admin Block - Tomorrow'
        })
      });
      
      if (response.ok) {
        showMessage('‚úÖ Tomorrow has been blocked successfully!', 'success');
        loadBlockedDates();
      } else {
        showMessage('‚ùå Failed to block tomorrow. Please try again.', 'error');
      }
    } catch (error) {
      showMessage('‚ùå Error blocking tomorrow: ' + error.message, 'error');
    }
  }

  async function blockWeekend() {
    try {
      const today = new Date();
      const saturday = new Date(today);
      saturday.setDate(today.getDate() + (6 - today.getDay()));
      const sunday = new Date(saturday);
      sunday.setDate(saturday.getDate() + 1);
      
      const response = await fetch('/api/admin/calendar/block-range', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          startDate: saturday.toISOString().split('T')[0],
          endDate: sunday.toISOString().split('T')[0],
          reason: 'Weekend Block'
        })
      });
      
      if (response.ok) {
        showMessage('‚úÖ This weekend has been blocked successfully!', 'success');
        loadBlockedDates();
      } else {
        showMessage('‚ùå Failed to block weekend. Please try again.', 'error');
      }
    } catch (error) {
      showMessage('‚ùå Error blocking weekend: ' + error.message, 'error');
    }
  }

  async function blockCustomDate() {
    const dateInput = document.getElementById('blockDate');
    const reasonInput = document.getElementById('blockReason');
    
    if (!dateInput.value) {
      showMessage('‚ùå Please select a date to block.', 'error');
      return;
    }
    
    if (!reasonInput.value) {
      showMessage('‚ùå Please provide a reason for blocking.', 'error');
      return;
    }
    
    try {
      const response = await fetch('/api/admin/calendar/block', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          date: dateInput.value,
          reason: reasonInput.value
        })
      });
      
      if (response.ok) {
        showMessage(`‚úÖ Date ${dateInput.value} has been blocked successfully!`, 'success');
        dateInput.value = '';
        reasonInput.value = '';
        loadBlockedDates();
      } else {
        showMessage('‚ùå Failed to block date. Please try again.', 'error');
      }
    } catch (error) {
      showMessage('‚ùå Error blocking date: ' + error.message, 'error');
    }
  }

  async function blockDateRange() {
    const startInput = document.getElementById('startDate');
    const endInput = document.getElementById('endDate');
    const reasonInput = document.getElementById('rangeReason');
    
    if (!startInput.value || !endInput.value) {
      showMessage('‚ùå Please select both start and end dates.', 'error');
      return;
    }
    
    if (!reasonInput.value) {
      showMessage('‚ùå Please provide a reason for blocking.', 'error');
      return;
    }
    
    if (new Date(startInput.value) > new Date(endInput.value)) {
      showMessage('‚ùå Start date must be before end date.', 'error');
      return;
    }
    
    try {
      const response = await fetch('/api/admin/calendar/block-range', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          startDate: startInput.value,
          endDate: endInput.value,
          reason: reasonInput.value
        })
      });
      
      if (response.ok) {
        showMessage(`‚úÖ Date range ${startInput.value} to ${endInput.value} has been blocked successfully!`, 'success');
        startInput.value = '';
        endInput.value = '';
        reasonInput.value = '';
        loadBlockedDates();
      } else {
        showMessage('‚ùå Failed to block date range. Please try again.', 'error');
      }
    } catch (error) {
      showMessage('‚ùå Error blocking date range: ' + error.message, 'error');
    }
  }

  async function loadBlockedDates() {
    try {
      const response = await fetch('/api/admin/calendar/blocks');
      
      if (response.ok) {
        const blocks = await response.json();
        const container = document.getElementById('blockedDatesList');
        
        if (blocks.length === 0) {
          container.innerHTML = '<p class="text-gray-500 italic">No blocked dates found</p>';
          return;
        }
        
        container.innerHTML = blocks.map(block => `
          <div class="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
            <div>
              <span class="font-medium">${block.start_date}${block.end_date !== block.start_date ? ' to ' + block.end_date : ''}</span>
              <span class="text-gray-600 ml-2">${block.reason}</span>
            </div>
            <button 
              onclick="unblockDate('${block.start_date}')"
              class="bg-red-500 hover:bg-red-600 text-white text-sm font-bold py-1 px-3 rounded transition-colors"
            >
              Unblock
            </button>
          </div>
        `).join('');
        
        showMessage(`‚úÖ Loaded ${blocks.length} blocked dates`, 'success');
      } else {
        showMessage('‚ùå Failed to load blocked dates.', 'error');
      }
    } catch (error) {
      showMessage('‚ùå Error loading blocked dates: ' + error.message, 'error');
    }
  }

  async function unblockDate(date) {
    if (!confirm(`Are you sure you want to unblock ${date}?`)) {
      return;
    }
    
    try {
      const response = await fetch('/api/admin/calendar/unblock', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          date: date
        })
      });
      
      if (response.ok) {
        showMessage(`‚úÖ Date ${date} has been unblocked successfully!`, 'success');
        loadBlockedDates();
      } else {
        showMessage('‚ùå Failed to unblock date. Please try again.', 'error');
      }
    } catch (error) {
      showMessage('‚ùå Error unblocking date: ' + error.message, 'error');
    }
  }

  // Load blocked dates on page load
  document.addEventListener('DOMContentLoaded', function() {
    loadBlockedDates();
  });
</script>

<style>
  /* Custom styles for the admin calendar */
  .admin-calendar {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }
  
  button:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  input:focus {
    transform: scale(1.02);
    transition: transform 0.2s ease;
  }
</style> 