---
import MainLayout from "@/layouts/MainLayout.astro";
import Container from "@/components/container.astro";
import { Icon } from "astro-icon/components";
---

<MainLayout title="Register - YOLOVibeCode">
  <div class="min-h-screen bg-gradient-to-b from-gray-900 via-slate-900 to-black text-white pt-20">
    <Container>
      <div class="max-w-md mx-auto">
        <div class="text-center mb-8">
          <div class="w-16 h-16 bg-gradient-to-r from-purple-500 to-indigo-500 rounded-full flex items-center justify-center mx-auto mb-4">
            <Icon class="text-white w-8 h-8" name="bx:bx-user-plus" />
          </div>
          <h1 class="text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-cyan-400 mb-2">
            Join YOLOVibeCode
          </h1>
          <p class="text-slate-400">Create your account to access workshop materials and track your progress</p>
        </div>

        <div class="bg-gradient-to-br from-slate-900/50 to-gray-900/50 p-8 rounded-2xl border border-slate-500/30 shadow-xl">
          <form id="registration-form" class="space-y-6">
            <!-- Name Fields -->
            <div class="grid md:grid-cols-2 gap-4">
              <div class="space-y-2">
                <label for="first-name" class="block text-white font-semibold text-sm" style="color: white !important; text-shadow: 0 0 1px rgba(255,255,255,0.5);">
                  First Name
                </label>
                <input
                  type="text"
                  id="first-name"
                  name="firstName"
                  required
                  class="w-full px-4 py-3 bg-black/30 border border-indigo-500/30 text-white placeholder-slate-400 rounded-lg focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all"
                  placeholder="Enter your first name"
                />
              </div>
              <div class="space-y-2">
                <label for="last-name" class="block text-white font-semibold text-sm" style="color: white !important; text-shadow: 0 0 1px rgba(255,255,255,0.5);">
                  Last Name
                </label>
                <input
                  type="text"
                  id="last-name"
                  name="lastName"
                  required
                  class="w-full px-4 py-3 bg-black/30 border border-indigo-500/30 text-white placeholder-slate-400 rounded-lg focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all"
                  placeholder="Enter your last name"
                />
              </div>
            </div>

            <!-- Email -->
            <div class="space-y-2">
              <label for="email" class="block text-white font-semibold text-sm" style="color: white !important; text-shadow: 0 0 1px rgba(255,255,255,0.5);">
                Email Address
              </label>
              <input
                type="email"
                id="email"
                name="email"
                required
                class="w-full px-4 py-3 bg-black/30 border border-indigo-500/30 text-white placeholder-slate-400 rounded-lg focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all"
                placeholder="your@email.com"
              />
            </div>

            <!-- Password -->
            <div class="space-y-2">
              <label for="password" class="block text-white font-semibold text-sm" style="color: white !important; text-shadow: 0 0 1px rgba(255,255,255,0.5);">
                Password
              </label>
              <input
                type="password"
                id="password"
                name="password"
                required
                class="w-full px-4 py-3 bg-black/30 border border-indigo-500/30 text-white placeholder-slate-400 rounded-lg focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all"
                placeholder="Create a strong password"
                minlength="8"
              />
              <p class="text-xs text-slate-400">Password must be at least 8 characters long</p>
            </div>

            <!-- Confirm Password -->
            <div class="space-y-2">
              <label for="confirm-password" class="block text-white font-semibold text-sm" style="color: white !important; text-shadow: 0 0 1px rgba(255,255,255,0.5);">
                Confirm Password
              </label>
              <input
                type="password"
                id="confirm-password"
                name="confirmPassword"
                required
                class="w-full px-4 py-3 bg-black/30 border border-indigo-500/30 text-white placeholder-slate-400 rounded-lg focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 transition-all"
                placeholder="Confirm your password"
              />
            </div>

            <!-- Terms and Newsletter -->
            <div class="space-y-4">
              <div class="flex items-start">
                <input
                  type="checkbox"
                  id="terms"
                  name="terms"
                  required
                  class="mt-1 w-4 h-4 text-purple-600 bg-black/30 border border-indigo-500/30 rounded focus:ring-purple-500/20 focus:ring-2"
                />
                <label for="terms" class="ml-3 text-sm text-slate-300">
                  I agree to the 
                  <a href="/unprivacy" class="text-purple-400 hover:text-purple-300 underline">radical openness policy</a>
                  and understand there is no privacy policy because we believe in complete transparency
                </label>
              </div>

              <div class="flex items-start">
                <input
                  type="checkbox"
                  id="newsletter"
                  name="newsletter"
                  class="mt-1 w-4 h-4 text-purple-600 bg-black/30 border border-indigo-500/30 rounded focus:ring-purple-500/20 focus:ring-2"
                />
                <label for="newsletter" class="ml-3 text-sm text-slate-300">
                  Subscribe to workshop updates and AI development tips (optional)
                </label>
              </div>
            </div>

            <!-- Submit Button -->
            <button
              type="submit"
              id="register-btn"
              class="w-full py-4 bg-gradient-to-r from-purple-600 via-pink-600 to-cyan-600 hover:from-purple-700 hover:via-pink-700 hover:to-cyan-700 text-white font-bold rounded-lg transition-all transform hover:scale-105 shadow-lg hover:shadow-2xl focus:ring-4 focus:ring-purple-500/50"
            >
              <span id="register-btn-text">Create Account</span>
              <span id="register-btn-loading" class="hidden">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Creating Account...
              </span>
            </button>

            <!-- Success/Error Messages -->
            <div id="register-message" class="hidden"></div>
          </form>

          <!-- Login Link -->
          <div class="mt-8 text-center border-t border-slate-600/30 pt-6">
            <p class="text-slate-400 text-sm">
              Already have an account?
              <a href="/login" class="text-purple-400 hover:text-purple-300 font-semibold ml-1">
                Sign in here
              </a>
            </p>
          </div>
        </div>
      </div>
    </Container>
  </div>

  <script>
    import { GlobalEventBus } from '../events/EventBus.js';
    import { AuthEventTypes } from '../events/AuthEventTypes.js';

    document.addEventListener('DOMContentLoaded', function() {
      const registrationForm = document.getElementById('registration-form');
      const registerBtn = document.getElementById('register-btn');
      const registerBtnText = document.getElementById('register-btn-text');
      const registerBtnLoading = document.getElementById('register-btn-loading');
      const registerMessage = document.getElementById('register-message');
      const eventBus = GlobalEventBus.getInstance();

      // Event listeners for registration events
      eventBus.on(AuthEventTypes.REGISTRATION_SUCCESS, (event) => {
        showMessage('Account created successfully! Please check your email to verify your account.', 'success');
        registrationForm.reset();
      });

      eventBus.on(AuthEventTypes.REGISTRATION_FAILED, (event) => {
        showMessage(event.error || 'Registration failed. Please try again.', 'error');
      });

      eventBus.on(AuthEventTypes.EMAIL_VERIFICATION_SENT, (event) => {
        showMessage('Verification email sent! Please check your inbox.', 'info');
      });

      registrationForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(registrationForm);
        const password = formData.get('password');
        const confirmPassword = formData.get('confirmPassword');
        
        // Validate password match
        if (password !== confirmPassword) {
          showMessage('Passwords do not match. Please try again.', 'error');
          return;
        }
        
        // Show loading state
        setLoadingState(true);
        
        try {
          // Emit registration attempted event
          await eventBus.emit(AuthEventTypes.REGISTRATION_ATTEMPTED, {
            email: formData.get('email'),
            firstName: formData.get('firstName'),
            lastName: formData.get('lastName'),
            newsletter: formData.get('newsletter') === 'on',
            timestamp: new Date(),
            source: 'registration_page'
          });
          
          // Make API call to register endpoint
          const response = await fetch('/api/auth/register', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              firstName: formData.get('firstName'),
              lastName: formData.get('lastName'),
              email: formData.get('email'),
              password: formData.get('password'),
              newsletter: formData.get('newsletter') === 'on'
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            await eventBus.emit(AuthEventTypes.REGISTRATION_SUCCESS, {
              userId: result.userId,
              email: formData.get('email'),
              timestamp: new Date()
            });
            
            if (result.emailVerificationSent) {
              await eventBus.emit(AuthEventTypes.EMAIL_VERIFICATION_SENT, {
                email: formData.get('email'),
                timestamp: new Date()
              });
            }
          } else {
            await eventBus.emit(AuthEventTypes.REGISTRATION_FAILED, {
              error: result.error,
              email: formData.get('email'),
              timestamp: new Date()
            });
          }
        } catch (error) {
          console.error('Registration error:', error);
          await eventBus.emit(AuthEventTypes.REGISTRATION_FAILED, {
            error: 'Network error. Please check your connection and try again.',
            timestamp: new Date()
          });
        } finally {
          setLoadingState(false);
        }
      });

      function setLoadingState(loading) {
        registerBtn.disabled = loading;
        registerBtnText.classList.toggle('hidden', loading);
        registerBtnLoading.classList.toggle('hidden', !loading);
      }

      function showMessage(message, type) {
        registerMessage.className = `mt-4 p-4 rounded-lg flex items-center ${
          type === 'success' ? 'text-green-400 bg-green-900/20 border border-green-500/30' :
          type === 'error' ? 'text-red-400 bg-red-900/20 border border-red-500/30' :
          'text-blue-400 bg-blue-900/20 border border-blue-500/30'
        }`;
        
        const icon = type === 'success' ? 
          '<svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>' :
          type === 'error' ?
          '<svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>' :
          '<svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>';
        
        registerMessage.innerHTML = icon + message;
        registerMessage.classList.remove('hidden');
        
        // Auto-hide after 5 seconds
        setTimeout(() => {
          registerMessage.classList.add('hidden');
        }, 5000);
      }
    });
  </script>
</MainLayout> 