---
import MainLayout from "@/layouts/MainLayout.astro";
import Container from "@/components/container.astro";
---

<MainLayout title="Reset Password | YOLOVibeCodeBootCamp" description="Reset your password to regain access to your YOLOVibe account">
  <Container>
    <div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div class="max-w-md w-full space-y-8">
        <div>
          <div class="mx-auto h-12 w-12 flex items-center justify-center rounded-full bg-gradient-to-r from-orange-500 to-red-500">
            <svg class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m0 0a2 2 0 012 2m-2-2v6m0 0v6a2 2 0 01-2 2h-4M9 7h6m0 0V5a2 2 0 00-2-2H9a2 2 0 00-2 2v2m0 0v6a2 2 0 002 2h4a2 2 0 002-2v-6" />
            </svg>
          </div>
          <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white">
            Reset your password
          </h2>
          <p class="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
            Enter your email address and we'll send you a link to reset your password
          </p>
        </div>
        
        <!-- Step 1: Request Reset -->
        <form id="reset-request-form" class="mt-8 space-y-6">
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Email address
            </label>
            <input
              id="email"
              name="email"
              type="email"
              autocomplete="email"
              required
              class="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white bg-white dark:bg-gray-800 rounded-md focus:outline-none focus:ring-purple-500 focus:border-purple-500 focus:z-10 sm:text-sm"
              placeholder="Enter your email address"
            />
          </div>

          <div>
            <button
              type="submit"
              id="reset-button"
              class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-all transform hover:scale-105"
            >
              <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                <svg class="h-5 w-5 text-orange-300 group-hover:text-orange-200" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                  <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                </svg>
              </span>
              Send Reset Link
            </button>
          </div>

          <div class="text-center">
            <p class="text-sm text-gray-600 dark:text-gray-400">
              Remember your password? 
              <a href="/login" class="font-medium text-purple-600 hover:text-purple-500 dark:text-purple-400 dark:hover:text-purple-300">
                Sign in here
              </a>
            </p>
          </div>
        </form>

        <!-- Step 2: New Password Form (Hidden initially) -->
        <form id="new-password-form" class="mt-8 space-y-6 hidden">
          <div class="space-y-4">
            <div>
              <label for="new-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                New Password
              </label>
              <input
                id="new-password"
                name="password"
                type="password"
                autocomplete="new-password"
                required
                class="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white bg-white dark:bg-gray-800 rounded-md focus:outline-none focus:ring-purple-500 focus:border-purple-500 focus:z-10 sm:text-sm"
                placeholder="Enter your new password"
              />
            </div>
            <div>
              <label for="confirm-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Confirm Password
              </label>
              <input
                id="confirm-password"
                name="confirmPassword"
                type="password"
                autocomplete="new-password"
                required
                class="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white bg-white dark:bg-gray-800 rounded-md focus:outline-none focus:ring-purple-500 focus:border-purple-500 focus:z-10 sm:text-sm"
                placeholder="Confirm your new password"
              />
            </div>
          </div>

          <div>
            <button
              type="submit"
              id="update-password-button"
              class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all transform hover:scale-105"
            >
              <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                <svg class="h-5 w-5 text-green-300 group-hover:text-green-200" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" />
                </svg>
              </span>
              Update Password
            </button>
          </div>
        </form>

        <!-- Status Messages -->
        <div id="reset-status" class="hidden mt-4">
          <div id="reset-error" class="hidden bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-400 px-4 py-3 rounded relative">
            <span id="error-message"></span>
          </div>
          <div id="reset-success" class="hidden bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-green-700 dark:text-green-400 px-4 py-3 rounded relative">
            <span id="success-message"></span>
          </div>
          <div id="reset-info" class="hidden bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 text-blue-700 dark:text-blue-400 px-4 py-3 rounded relative">
            <span id="info-message"></span>
          </div>
        </div>
      </div>
    </div>
  </Container>
</MainLayout>

<script>
  import { GlobalEventBus } from '../events/EventBus.js';
  import { AuthEventTypes } from '../events/AuthEventTypes.js';

  document.addEventListener('DOMContentLoaded', function() {
    const resetRequestForm = document.getElementById('reset-request-form') as HTMLFormElement;
    const newPasswordForm = document.getElementById('new-password-form') as HTMLFormElement;
    const resetButton = document.getElementById('reset-button') as HTMLButtonElement;
    const updatePasswordButton = document.getElementById('update-password-button') as HTMLButtonElement;
    const resetStatus = document.getElementById('reset-status') as HTMLElement;
    const resetError = document.getElementById('reset-error') as HTMLElement;
    const resetSuccess = document.getElementById('reset-success') as HTMLElement;
    const resetInfo = document.getElementById('reset-info') as HTMLElement;
    const errorMessage = document.getElementById('error-message') as HTMLElement;
    const successMessage = document.getElementById('success-message') as HTMLElement;
    const infoMessage = document.getElementById('info-message') as HTMLElement;

    // Initialize event bus
    const eventBus = GlobalEventBus.getInstance();

    // Get reset token from URL if present
    const urlParams = new URLSearchParams(window.location.search);
    const resetToken = urlParams.get('token');
    const email = urlParams.get('email');

    // If we have a reset token, show the new password form
    if (resetToken && email) {
      resetRequestForm.classList.add('hidden');
      newPasswordForm.classList.remove('hidden');
      showInfo('Please enter your new password below.');
    }

    // Listen for password reset events
    eventBus.on(AuthEventTypes.PASSWORD_RESET_EMAIL_SENT, (event) => {
      console.log('üìß Reset email sent:', event.email);
      showSuccess('Password reset link has been sent to your email address. Please check your inbox and spam folder.');
    });

    eventBus.on(AuthEventTypes.PASSWORD_RESET_SUCCESS, (event) => {
      console.log('‚úÖ Password reset successful:', event.email);
      showSuccess('Your password has been updated successfully! You can now sign in with your new password.');
      setTimeout(() => {
        window.location.href = '/login';
      }, 3000);
    });

    eventBus.on(AuthEventTypes.PASSWORD_RESET_FAILED, (event) => {
      console.log('‚ùå Password reset failed:', event.reason);
      const errorMessages = {
        'invalid_token': 'Invalid or expired reset link. Please request a new one.',
        'token_expired': 'Reset link has expired. Please request a new one.',
        'user_not_found': 'No account found with this email address.',
        'weak_password': 'Password is too weak. Please choose a stronger password.'
      };
      showError(errorMessages[event.reason] || 'Password reset failed. Please try again.');
    });

    function showError(message: string) {
      resetStatus.classList.remove('hidden');
      resetError.classList.remove('hidden');
      resetSuccess.classList.add('hidden');
      resetInfo.classList.add('hidden');
      errorMessage.textContent = message;
    }

    function showSuccess(message: string) {
      resetStatus.classList.remove('hidden');
      resetSuccess.classList.remove('hidden');
      resetError.classList.add('hidden');
      resetInfo.classList.add('hidden');
      successMessage.textContent = message;
    }

    function showInfo(message: string) {
      resetStatus.classList.remove('hidden');
      resetInfo.classList.remove('hidden');
      resetError.classList.add('hidden');
      resetSuccess.classList.add('hidden');
      infoMessage.textContent = message;
    }

    function hideMessages() {
      resetStatus.classList.add('hidden');
      resetError.classList.add('hidden');
      resetSuccess.classList.add('hidden');
      resetInfo.classList.add('hidden');
    }

    // Handle reset request form
    resetRequestForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      hideMessages();

      const formData = new FormData(resetRequestForm);
      const email = formData.get('email') as string;

      if (!email) {
        showError('Please enter your email address.');
        return;
      }

      // Emit password reset requested event
      await eventBus.emit(AuthEventTypes.PASSWORD_RESET_REQUESTED, {
        email,
        ipAddress: await getClientIP(),
        userAgent: navigator.userAgent,
        timestamp: new Date(),
        source: 'reset_password_page'
      });

      // Disable button and show loading state
      resetButton.disabled = true;
      resetButton.innerHTML = `
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Sending...
      `;

      try {
        const response = await fetch('/api/auth/reset-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email }),
        });

        const result = await response.json();

        if (!result.success) {
          await eventBus.emit(AuthEventTypes.PASSWORD_RESET_FAILED, {
            email,
            reason: result.reason || 'user_not_found',
            timestamp: new Date(),
            source: 'reset_password_page'
          });
        }
        // Success event will be emitted by the API
      } catch (error) {
        console.error('Password reset error:', error);
        await eventBus.emit(AuthEventTypes.PASSWORD_RESET_FAILED, {
          email,
          reason: 'server_error',
          timestamp: new Date(),
          source: 'reset_password_page'
        });
      } finally {
        // Reset button
        resetButton.disabled = false;
        resetButton.innerHTML = `
          <span class="absolute left-0 inset-y-0 flex items-center pl-3">
            <svg class="h-5 w-5 text-orange-300 group-hover:text-orange-200" fill="currentColor" viewBox="0 0 20 20">
              <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
              <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
            </svg>
          </span>
          Send Reset Link
        `;
      }
    });

    // Handle new password form
    newPasswordForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      hideMessages();

      const formData = new FormData(newPasswordForm);
      const password = formData.get('password') as string;
      const confirmPassword = formData.get('confirmPassword') as string;

      if (!password || !confirmPassword) {
        showError('Please fill in both password fields.');
        return;
      }

      if (password !== confirmPassword) {
        showError('Passwords do not match.');
        return;
      }

      if (password.length < 8) {
        showError('Password must be at least 8 characters long.');
        return;
      }

      // Disable button and show loading state
      updatePasswordButton.disabled = true;
      updatePasswordButton.innerHTML = `
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Updating...
      `;

      try {
        const response = await fetch('/api/auth/update-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ 
            token: resetToken, 
            email: email,
            password: password 
          }),
        });

        const result = await response.json();

        if (!result.success) {
          await eventBus.emit(AuthEventTypes.PASSWORD_RESET_FAILED, {
            email: email || undefined,
            resetToken: resetToken || undefined,
            reason: result.reason || 'invalid_token',
            timestamp: new Date(),
            source: 'reset_password_page'
          });
        }
        // Success event will be emitted by the API
      } catch (error) {
        console.error('Password update error:', error);
        await eventBus.emit(AuthEventTypes.PASSWORD_RESET_FAILED, {
          email: email || undefined,
          resetToken: resetToken || undefined,
          reason: 'server_error',
          timestamp: new Date(),
          source: 'reset_password_page'
        });
      } finally {
        // Reset button
        updatePasswordButton.disabled = false;
        updatePasswordButton.innerHTML = `
          <span class="absolute left-0 inset-y-0 flex items-center pl-3">
            <svg class="h-5 w-5 text-green-300 group-hover:text-green-200" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" />
            </svg>
          </span>
          Update Password
        `;
      }
    });

    // Helper function to get client IP
    async function getClientIP(): Promise<string> {
      try {
        const response = await fetch('/api/client-info');
        const data = await response.json();
        return data.ip || 'unknown';
      } catch {
        return 'unknown';
      }
    }
  });
</script> 