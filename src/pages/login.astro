---
import MainLayout from "@/layouts/MainLayout.astro";
import Container from "@/components/container.astro";
---

<MainLayout title="Login | YOLOVibeCodeBootCamp" description="Login to your YOLOVibe account to access your dashboard and workshop materials">
  <Container>
    <div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div class="max-w-md w-full space-y-8">
        <div>
          <div class="mx-auto h-12 w-12 flex items-center justify-center rounded-full bg-gradient-to-r from-purple-600 to-indigo-600">
            <svg class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
          </div>
          <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white">
            Sign in to your account
          </h2>
          <p class="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
            Access your workshop dashboard and materials
          </p>
        </div>
        
        <form id="login-form" class="mt-8 space-y-6">
          <div class="space-y-4">
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700 dark:text-white dark:font-semibold" style="color: white !important; text-shadow: 0 0 1px rgba(255,255,255,0.5);">
                Email address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autocomplete="email"
                required
                class="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white bg-white dark:bg-gray-800 rounded-md focus:outline-none focus:ring-purple-500 focus:border-purple-500 focus:z-10 sm:text-sm"
                placeholder="Enter your email"
              />
            </div>
            <div>
              <label for="password" class="block text-sm font-medium text-gray-700 dark:text-white dark:font-semibold" style="color: white !important; text-shadow: 0 0 1px rgba(255,255,255,0.5);">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autocomplete="current-password"
                required
                class="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white bg-white dark:bg-gray-800 rounded-md focus:outline-none focus:ring-purple-500 focus:border-purple-500 focus:z-10 sm:text-sm"
                placeholder="Enter your password"
              />
            </div>
          </div>

          <div class="flex items-center justify-between">
            <div class="flex items-center">
              <input
                id="remember-me"
                name="remember-me"
                type="checkbox"
                class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 dark:border-gray-500 rounded"
              />
              <label for="remember-me" class="ml-2 block text-sm text-gray-900 dark:text-white dark:font-semibold" style="color: white !important; text-shadow: 0 0 1px rgba(255,255,255,0.5);">
                Remember me
              </label>
            </div>

            <div class="text-sm">
              <a href="#" class="font-medium text-purple-600 hover:text-purple-500 dark:text-purple-400 dark:hover:text-purple-300">
                Forgot your password?
              </a>
            </div>
          </div>

          <div>
            <button
              type="submit"
              id="login-button"
              class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transition-all transform hover:scale-105"
            >
              <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                <svg class="h-5 w-5 text-purple-500 group-hover:text-purple-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" />
                </svg>
              </span>
              Sign in
            </button>
          </div>

          <div class="text-center">
            <p class="text-sm text-gray-600 dark:text-gray-400">
              Don't have an account? 
              <a href="/register" class="font-medium text-purple-600 hover:text-purple-500 dark:text-purple-400 dark:hover:text-purple-300">
                Sign up here
              </a>
            </p>
          </div>
        </form>

        <!-- Status Messages -->
        <div id="login-status" class="hidden mt-4">
          <div id="login-error" class="hidden bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-400 px-4 py-3 rounded relative">
            <span id="error-message"></span>
          </div>
          <div id="login-success" class="hidden bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-green-700 dark:text-green-400 px-4 py-3 rounded relative">
            <span id="success-message">Login successful! Redirecting...</span>
          </div>
        </div>
      </div>
    </div>
  </Container>
</MainLayout>

<script>
  import { GlobalEventBus } from '../events/EventBus.js';
  import { AuthEventTypes } from '../events/AuthEventTypes.js';

  document.addEventListener('DOMContentLoaded', function() {
    const loginForm = document.getElementById('login-form') as HTMLFormElement;
    const loginButton = document.getElementById('login-button') as HTMLButtonElement;
    const loginStatus = document.getElementById('login-status') as HTMLElement;
    const loginError = document.getElementById('login-error') as HTMLElement;
    const loginSuccess = document.getElementById('login-success') as HTMLElement;
    const errorMessage = document.getElementById('error-message') as HTMLElement;

    // Listen for auth events
    GlobalEventBus.on(AuthEventTypes.LOGIN_SUCCESS, (event) => {
      console.log('üéâ Login successful:', event.email);
      showSuccess();
      
      // Store session info
      localStorage.setItem('sessionToken', event.sessionToken);
      localStorage.setItem('userId', event.userId);
      
      // Redirect based on user type
      setTimeout(() => {
        window.location.href = event.email.includes('admin') ? '/admin/dashboard' : '/portal';
      }, 1500);
    });

    GlobalEventBus.on(AuthEventTypes.LOGIN_FAILED, (event) => {
      console.log('‚ùå Login failed:', event.reason);
      const errorMessages = {
        'invalid_credentials': 'Invalid email or password.',
        'account_locked': 'Your account has been locked due to multiple failed attempts.',
        'account_inactive': 'Your account is inactive. Please contact support.',
        'server_error': 'A server error occurred. Please try again.'
      };
      showError(errorMessages[event.reason] || 'Login failed. Please try again.');
    });

    function showError(message: string) {
      loginStatus.classList.remove('hidden');
      loginError.classList.remove('hidden');
      loginSuccess.classList.add('hidden');
      errorMessage.textContent = message;
    }

    function showSuccess() {
      loginStatus.classList.remove('hidden');
      loginSuccess.classList.remove('hidden');
      loginError.classList.add('hidden');
    }

    function hideMessages() {
      loginStatus.classList.add('hidden');
      loginError.classList.add('hidden');
      loginSuccess.classList.add('hidden');
    }

    loginForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      hideMessages();

      const formData = new FormData(loginForm);
      const email = formData.get('email') as string;
      const password = formData.get('password') as string;

      if (!email || !password) {
        showError('Please enter both email and password.');
        return;
      }

                // Emit login attempted event
          await GlobalEventBus.emit(AuthEventTypes.LOGIN_ATTEMPTED, {
        email,
        ipAddress: await getClientIP(),
        userAgent: navigator.userAgent,
        timestamp: new Date(),
        source: 'login_page'
      });

      // Disable button and show loading state
      loginButton.disabled = true;
      loginButton.innerHTML = `
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Signing in...
      `;

      try {
        const response = await fetch('/api/auth/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email, password }),
        });

        const result = await response.json();

        if (result.success) {
          // Emit login success event
          await GlobalEventBus.emit(AuthEventTypes.LOGIN_SUCCESS, {
            email,
            userId: result.data.userId,
            sessionToken: result.data.sessionToken,
            expiresAt: result.data.expiresAt,
            timestamp: new Date(),
            source: 'login_page'
          });
        } else {
          // Emit login failed event
          await GlobalEventBus.emit(AuthEventTypes.LOGIN_FAILED, {
            email,
            reason: result.reason || 'invalid_credentials',
            ipAddress: await getClientIP(),
            userAgent: navigator.userAgent,
            timestamp: new Date(),
            source: 'login_page'
          });
        }
      } catch (error) {
        console.error('Login error:', error);
        await GlobalEventBus.emit(AuthEventTypes.LOGIN_FAILED, {
          email,
          reason: 'server_error',
          ipAddress: await getClientIP(),
          userAgent: navigator.userAgent,
          timestamp: new Date(),
          source: 'login_page'
        });
      } finally {
        // Reset button
        loginButton.disabled = false;
        loginButton.innerHTML = `
          <span class="absolute left-0 inset-y-0 flex items-center pl-3">
            <svg class="h-5 w-5 text-purple-500 group-hover:text-purple-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" />
            </svg>
          </span>
          Sign in
        `;
      }
    });

    // Helper function to get client IP (simplified)
    async function getClientIP(): Promise<string> {
      try {
        const response = await fetch('/api/client-info');
        const data = await response.json();
        return data.ip || 'unknown';
      } catch {
        return 'unknown';
      }
    }
  });
</script> 